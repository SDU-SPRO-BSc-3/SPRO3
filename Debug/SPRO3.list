
SPRO3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800498c  0800498c  0000598c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a84  08004a84  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a8c  08004a8c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a8c  08004a8c  00005a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a90  08004a90  00005a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004a94  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  08004afc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004afc  000062b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d56e  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d87  00000000  00000000  00013606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00015390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a85  00000000  00000000  00016108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182c0  00000000  00000000  00016b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0dd  00000000  00000000  0002ee4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aef4  00000000  00000000  0003df2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8e1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004228  00000000  00000000  000d8e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000dd08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004974 	.word	0x08004974

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004974 	.word	0x08004974

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fda0 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f836 	bl	80005e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_TIM2_Init();                // Initialize Timer 2 for PWM
 800057c:	f000 f8f2 	bl	8000764 <MX_TIM2_Init>
  MX_ADC1_Init();                // Initialize ADC1 for IR sensors
 8000580:	f000 f89e 	bl	80006c0 <MX_ADC1_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f998 	bl	80008b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000588:	f000 f8ec 	bl	8000764 <MX_TIM2_Init>
  MX_ADC1_Init();
 800058c:	f000 f898 	bl	80006c0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f968 	bl	8000864 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Start LEFT_MOTOR_PWM
 8000594:	2100      	movs	r1, #0
 8000596:	4811      	ldr	r0, [pc, #68]	@ (80005dc <main+0x6c>)
 8000598:	f002 f9ca 	bl	8002930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Start RIGHT_MOTOR_PWM
 800059c:	2104      	movs	r1, #4
 800059e:	480f      	ldr	r0, [pc, #60]	@ (80005dc <main+0x6c>)
 80005a0:	f002 f9c6 	bl	8002930 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(once == 0)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <main+0x70>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d113      	bne.n	80005d4 <main+0x64>
	  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2120      	movs	r1, #32
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <main+0x74>)
 80005b2:	f001 fc63 	bl	8001e7c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80005b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ba:	f000 fdef 	bl	800119c <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2120      	movs	r1, #32
 80005c2:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <main+0x74>)
 80005c4:	f001 fc5a 	bl	8001e7c <HAL_GPIO_WritePin>
	  once++;
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <main+0x70>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b03      	ldr	r3, [pc, #12]	@ (80005e0 <main+0x70>)
 80005d2:	701a      	strb	r2, [r3, #0]
	  }
	solveMaze();
 80005d4:	f000 fa8e 	bl	8000af4 <solveMaze>
	  if(once == 0)
 80005d8:	e7e4      	b.n	80005a4 <main+0x34>
 80005da:	bf00      	nop
 80005dc:	200000cc 	.word	0x200000cc
 80005e0:	2000015c 	.word	0x2000015c
 80005e4:	40020000 	.word	0x40020000

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fb21 	bl	8003c3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a28      	ldr	r2, [pc, #160]	@ (80006b8 <SystemClock_Config+0xd0>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000634:	4a21      	ldr	r2, [pc, #132]	@ (80006bc <SystemClock_Config+0xd4>)
 8000636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800065c:	2310      	movs	r3, #16
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000664:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000666:	2304      	movs	r3, #4
 8000668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fc1c 	bl	8001eb0 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800067e:	f000 fad7 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2102      	movs	r1, #2
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fe7e 	bl	80023a0 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006aa:	f000 fac1 	bl	8000c30 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	@ 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	@ (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_ADC1_Init+0x98>)
 8000702:	4a17      	ldr	r2, [pc, #92]	@ (8000760 <MX_ADC1_Init+0xa0>)
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_ADC1_Init+0x98>)
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000720:	480d      	ldr	r0, [pc, #52]	@ (8000758 <MX_ADC1_Init+0x98>)
 8000722:	f000 fd5f 	bl	80011e4 <HAL_ADC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800072c:	f000 fa80 	bl	8000c30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_ADC1_Init+0x98>)
 8000742:	f000 ff13 	bl	800156c <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800074c:	f000 fa70 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000084 	.word	0x20000084
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08e      	sub	sp, #56	@ 0x38
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]
 8000792:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000794:	4b32      	ldr	r3, [pc, #200]	@ (8000860 <MX_TIM2_Init+0xfc>)
 8000796:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800079a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 254;
 800079c:	4b30      	ldr	r3, [pc, #192]	@ (8000860 <MX_TIM2_Init+0xfc>)
 800079e:	22fe      	movs	r2, #254	@ 0xfe
 80007a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <MX_TIM2_Init+0xfc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000860 <MX_TIM2_Init+0xfc>)
 80007aa:	f04f 32ff 	mov.w	r2, #4294967295
 80007ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000860 <MX_TIM2_Init+0xfc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000860 <MX_TIM2_Init+0xfc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007bc:	4828      	ldr	r0, [pc, #160]	@ (8000860 <MX_TIM2_Init+0xfc>)
 80007be:	f002 f80f 	bl	80027e0 <HAL_TIM_Base_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007c8:	f000 fa32 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4821      	ldr	r0, [pc, #132]	@ (8000860 <MX_TIM2_Init+0xfc>)
 80007da:	f002 fa1b 	bl	8002c14 <HAL_TIM_ConfigClockSource>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007e4:	f000 fa24 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007e8:	481d      	ldr	r0, [pc, #116]	@ (8000860 <MX_TIM2_Init+0xfc>)
 80007ea:	f002 f848 	bl	800287e <HAL_TIM_PWM_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007f4:	f000 fa1c 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4619      	mov	r1, r3
 8000806:	4816      	ldr	r0, [pc, #88]	@ (8000860 <MX_TIM2_Init+0xfc>)
 8000808:	f002 fda4 	bl	8003354 <HAL_TIMEx_MasterConfigSynchronization>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000812:	f000 fa0d 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000816:	2360      	movs	r3, #96	@ 0x60
 8000818:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800081a:	230a      	movs	r3, #10
 800081c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	4619      	mov	r1, r3
 800082c:	480c      	ldr	r0, [pc, #48]	@ (8000860 <MX_TIM2_Init+0xfc>)
 800082e:	f002 f92f 	bl	8002a90 <HAL_TIM_PWM_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000838:	f000 f9fa 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2204      	movs	r2, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4807      	ldr	r0, [pc, #28]	@ (8000860 <MX_TIM2_Init+0xfc>)
 8000844:	f002 f924 	bl	8002a90 <HAL_TIM_PWM_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800084e:	f000 f9ef 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000852:	4803      	ldr	r0, [pc, #12]	@ (8000860 <MX_TIM2_Init+0xfc>)
 8000854:	f000 fa7e 	bl	8000d54 <HAL_TIM_MspPostInit>

}
 8000858:	bf00      	nop
 800085a:	3738      	adds	r7, #56	@ 0x38
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200000cc 	.word	0x200000cc

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	@ (80008b4 <MX_USART2_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800089c:	f002 fdc8 	bl	8003430 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 f9c3 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000114 	.word	0x20000114
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b3f      	ldr	r3, [pc, #252]	@ (80009d0 <MX_GPIO_Init+0x118>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a3e      	ldr	r2, [pc, #248]	@ (80009d0 <MX_GPIO_Init+0x118>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b3c      	ldr	r3, [pc, #240]	@ (80009d0 <MX_GPIO_Init+0x118>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b38      	ldr	r3, [pc, #224]	@ (80009d0 <MX_GPIO_Init+0x118>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a37      	ldr	r2, [pc, #220]	@ (80009d0 <MX_GPIO_Init+0x118>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b35      	ldr	r3, [pc, #212]	@ (80009d0 <MX_GPIO_Init+0x118>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <MX_GPIO_Init+0x118>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a30      	ldr	r2, [pc, #192]	@ (80009d0 <MX_GPIO_Init+0x118>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b2e      	ldr	r3, [pc, #184]	@ (80009d0 <MX_GPIO_Init+0x118>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <MX_GPIO_Init+0x118>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a29      	ldr	r2, [pc, #164]	@ (80009d0 <MX_GPIO_Init+0x118>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <MX_GPIO_Init+0x118>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	4824      	ldr	r0, [pc, #144]	@ (80009d4 <MX_GPIO_Init+0x11c>)
 8000944:	f001 fa9a 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800094e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	481e      	ldr	r0, [pc, #120]	@ (80009d8 <MX_GPIO_Init+0x120>)
 8000960:	f001 f908 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000964:	2320      	movs	r3, #32
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4816      	ldr	r0, [pc, #88]	@ (80009d4 <MX_GPIO_Init+0x11c>)
 800097c:	f001 f8fa 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000980:	2310      	movs	r3, #16
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <MX_GPIO_Init+0x120>)
 8000994:	f001 f8ee 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_SENSOR_FRONT_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_FRONT_Pin;
 8000998:	2320      	movs	r3, #32
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_SENSOR_FRONT_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <MX_GPIO_Init+0x120>)
 80009ac:	f001 f8e2 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_SENSOR_LEFT_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_LEFT_Pin;
 80009b0:	2302      	movs	r3, #2
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_SENSOR_LEFT_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	@ (80009dc <MX_GPIO_Init+0x124>)
 80009c4:	f001 f8d6 	bl	8001b74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	@ 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020400 	.word	0x40020400

080009e0 <readIRSensor>:
 * Reads an analog value from a specified ADC channel for IR sensors.
 * hadc: Pointer to ADC handle (e.g., hadc1)
 * channel: ADC channel to read (e.g., ADC_CHANNEL_0)
 * Analog value from the specified channel
 */
uint32_t readIRSensor(ADC_HandleTypeDef *hadc, uint32_t channel) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]

    sConfig.Channel = channel;                  // Specify the ADC channel
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	60fb      	str	r3, [r7, #12]
    // sConfig.Rank = ADC_REGULAR_RANK_1;          // Set rank for single conversion
    HAL_ADC_ConfigChannel(hadc, &sConfig);      // Apply configuration
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4619      	mov	r1, r3
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 fdb2 	bl	800156c <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(hadc);                        // Start ADC conversion
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f000 fc2f 	bl	800126c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY); // Wait for conversion to complete
 8000a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 fd11 	bl	800143a <HAL_ADC_PollForConversion>
    uint32_t value = HAL_ADC_GetValue(hadc);    // Retrieve the ADC value
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 fd99 	bl	8001550 <HAL_ADC_GetValue>
 8000a1e:	61f8      	str	r0, [r7, #28]
    HAL_ADC_Stop(hadc);                         // Stop the ADC
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f000 fcd7 	bl	80013d4 <HAL_ADC_Stop>
    return value;                               // Return the sensor value
 8000a26:	69fb      	ldr	r3, [r7, #28]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <moveForward>:

/**
 * Moves the robot forward.
 */
void moveForward() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // LEFT_MOTOR_DIR: Forward
 8000a34:	2201      	movs	r2, #1
 8000a36:	2101      	movs	r1, #1
 8000a38:	4808      	ldr	r0, [pc, #32]	@ (8000a5c <moveForward+0x2c>)
 8000a3a:	f001 fa1f 	bl	8001e7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);  // RIGHT_MOTOR_DIR: Forward
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2102      	movs	r1, #2
 8000a42:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <moveForward+0x2c>)
 8000a44:	f001 fa1a 	bl	8001e7c <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 200);   // LEFT_MOTOR_PWM
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <moveForward+0x30>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	22c8      	movs	r2, #200	@ 0xc8
 8000a4e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 200);   // RIGHT_MOTOR_PWM
 8000a50:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <moveForward+0x30>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	22c8      	movs	r2, #200	@ 0xc8
 8000a56:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	200000cc 	.word	0x200000cc

08000a64 <turnLeft>:

/**
 * Turns the robot left.
 */
void turnLeft() {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // LEFT_MOTOR_DIR: Reverse
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <turnLeft+0x40>)
 8000a6e:	f001 fa05 	bl	8001e7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // RIGHT_MOTOR_DIR: Forward
 8000a72:	2201      	movs	r2, #1
 8000a74:	2102      	movs	r1, #2
 8000a76:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <turnLeft+0x40>)
 8000a78:	f001 fa00 	bl	8001e7c <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 200);    // LEFT_MOTOR_PWM
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <turnLeft+0x44>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	22c8      	movs	r2, #200	@ 0xc8
 8000a82:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 200);    // RIGHT_MOTOR_PWM
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <turnLeft+0x44>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	22c8      	movs	r2, #200	@ 0xc8
 8000a8a:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(500);  // Delay for turning duration (adjust as needed)
 8000a8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a90:	f000 fb84 	bl	800119c <HAL_Delay>
    moveForward();
 8000a94:	f7ff ffcc 	bl	8000a30 <moveForward>
    HAL_Delay(200);
 8000a98:	20c8      	movs	r0, #200	@ 0xc8
 8000a9a:	f000 fb7f 	bl	800119c <HAL_Delay>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	200000cc 	.word	0x200000cc

08000aac <turnRight>:

/**
 * Turns the robot right.
 */
void turnRight() {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);   // LEFT_MOTOR_DIR: Forward
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	480d      	ldr	r0, [pc, #52]	@ (8000aec <turnRight+0x40>)
 8000ab6:	f001 f9e1 	bl	8001e7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // RIGHT_MOTOR_DIR: Reverse
 8000aba:	2200      	movs	r2, #0
 8000abc:	2102      	movs	r1, #2
 8000abe:	480b      	ldr	r0, [pc, #44]	@ (8000aec <turnRight+0x40>)
 8000ac0:	f001 f9dc 	bl	8001e7c <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 200);    // LEFT_MOTOR_PWM
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <turnRight+0x44>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	22c8      	movs	r2, #200	@ 0xc8
 8000aca:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 200);    // RIGHT_MOTOR_PWM
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <turnRight+0x44>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	22c8      	movs	r2, #200	@ 0xc8
 8000ad2:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(500);  // Delay for turning duration (adjust as needed)
 8000ad4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ad8:	f000 fb60 	bl	800119c <HAL_Delay>
    moveForward();
 8000adc:	f7ff ffa8 	bl	8000a30 <moveForward>
    HAL_Delay(200);
 8000ae0:	20c8      	movs	r0, #200	@ 0xc8
 8000ae2:	f000 fb5b 	bl	800119c <HAL_Delay>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40020400 	.word	0x40020400
 8000af0:	200000cc 	.word	0x200000cc

08000af4 <solveMaze>:
}

/**
 * Implements a simple maze-solving algorithm using IR sensors and a color sensor.
 */
void solveMaze() {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
    while (1) {
        // Read sensor values
        uint32_t frontADC = readIRSensor(&hadc1, ADC_CHANNEL_0);  // Front IR sensor
 8000afa:	2100      	movs	r1, #0
 8000afc:	484a      	ldr	r0, [pc, #296]	@ (8000c28 <solveMaze+0x134>)
 8000afe:	f7ff ff6f 	bl	80009e0 <readIRSensor>
 8000b02:	6138      	str	r0, [r7, #16]
        uint32_t leftADC = readIRSensor(&hadc1, ADC_CHANNEL_4);   // Left IR sensor
 8000b04:	2104      	movs	r1, #4
 8000b06:	4848      	ldr	r0, [pc, #288]	@ (8000c28 <solveMaze+0x134>)
 8000b08:	f7ff ff6a 	bl	80009e0 <readIRSensor>
 8000b0c:	60f8      	str	r0, [r7, #12]
        uint32_t rightADC = readIRSensor(&hadc1, ADC_CHANNEL_6);  // Right IR sensor
 8000b0e:	2106      	movs	r1, #6
 8000b10:	4845      	ldr	r0, [pc, #276]	@ (8000c28 <solveMaze+0x134>)
 8000b12:	f7ff ff65 	bl	80009e0 <readIRSensor>
 8000b16:	60b8      	str	r0, [r7, #8]

        char front=0, left=0, right=0, tempsum=0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	75fb      	strb	r3, [r7, #23]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	75bb      	strb	r3, [r7, #22]
 8000b20:	2300      	movs	r3, #0
 8000b22:	757b      	strb	r3, [r7, #21]
 8000b24:	2300      	movs	r3, #0
 8000b26:	71fb      	strb	r3, [r7, #7]
//        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
//        HAL_Delay(10);
//        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

        if (frontADC != 0 && frontADC !=NULL)
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d004      	beq.n	8000b38 <solveMaze+0x44>
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <solveMaze+0x44>
        {
        	front = 0x01;
 8000b34:	2301      	movs	r3, #1
 8000b36:	75fb      	strb	r3, [r7, #23]
        }

        if(leftADC < SENSOR_THRESHOLD){
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f5b3 6fa5 	cmp.w	r3, #1320	@ 0x528
 8000b3e:	d207      	bcs.n	8000b50 <solveMaze+0x5c>
        	left = 0x02;
 8000b40:	2302      	movs	r3, #2
 8000b42:	75bb      	strb	r3, [r7, #22]
        	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2120      	movs	r1, #32
 8000b48:	4838      	ldr	r0, [pc, #224]	@ (8000c2c <solveMaze+0x138>)
 8000b4a:	f001 f997 	bl	8001e7c <HAL_GPIO_WritePin>
 8000b4e:	e004      	b.n	8000b5a <solveMaze+0x66>
    }else {HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);}
 8000b50:	2200      	movs	r2, #0
 8000b52:	2120      	movs	r1, #32
 8000b54:	4835      	ldr	r0, [pc, #212]	@ (8000c2c <solveMaze+0x138>)
 8000b56:	f001 f991 	bl	8001e7c <HAL_GPIO_WritePin>

        if(rightADC > SENSOR_THRESHOLD){
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	f5b3 6fa5 	cmp.w	r3, #1320	@ 0x528
 8000b60:	d901      	bls.n	8000b66 <solveMaze+0x72>
        	right = 0x04;
 8000b62:	2304      	movs	r3, #4
 8000b64:	757b      	strb	r3, [r7, #21]
			  L = (0 | 0x02 | 0),
			  R = (0 | 0 | 0x04),
			  DeadEnd = (0 | 0 | 0)
        }STATE;

        STATE = front | left | right;
 8000b66:	7dfa      	ldrb	r2, [r7, #23]
 8000b68:	7dbb      	ldrb	r3, [r7, #22]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	7d7b      	ldrb	r3, [r7, #21]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
        	char choice;
			choice=rand()%tempsum;
 8000b74:	f002 ff20 	bl	80039b8 <rand>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	fb92 f1f3 	sdiv	r1, r2, r3
 8000b80:	fb01 f303 	mul.w	r3, r1, r3
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	717b      	strb	r3, [r7, #5]
			switch(STATE){
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	2b07      	cmp	r3, #7
 8000b8c:	d8b5      	bhi.n	8000afa <solveMaze+0x6>
 8000b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b94 <solveMaze+0xa0>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000c1d 	.word	0x08000c1d
 8000b98:	08000c11 	.word	0x08000c11
 8000b9c:	08000c15 	.word	0x08000c15
 8000ba0:	08000be9 	.word	0x08000be9
 8000ba4:	08000c19 	.word	0x08000c19
 8000ba8:	08000bfd 	.word	0x08000bfd
 8000bac:	08000bd5 	.word	0x08000bd5
 8000bb0:	08000bb5 	.word	0x08000bb5
			case FLR: {
				switch(choice){
 8000bb4:	797b      	ldrb	r3, [r7, #5]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d00a      	beq.n	8000bd0 <solveMaze+0xdc>
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	dc0a      	bgt.n	8000bd4 <solveMaze+0xe0>
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d002      	beq.n	8000bc8 <solveMaze+0xd4>
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d002      	beq.n	8000bcc <solveMaze+0xd8>
 8000bc6:	e005      	b.n	8000bd4 <solveMaze+0xe0>
				case 0: turnLeft();
 8000bc8:	f7ff ff4c 	bl	8000a64 <turnLeft>
				case 1: moveForward();
 8000bcc:	f7ff ff30 	bl	8000a30 <moveForward>
				case 2: turnRight();
 8000bd0:	f7ff ff6c 	bl	8000aac <turnRight>
				}
			}
			case LR: {
				switch(choice){
 8000bd4:	797b      	ldrb	r3, [r7, #5]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d002      	beq.n	8000be0 <solveMaze+0xec>
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d002      	beq.n	8000be4 <solveMaze+0xf0>
 8000bde:	e003      	b.n	8000be8 <solveMaze+0xf4>
				case 0: turnLeft();
 8000be0:	f7ff ff40 	bl	8000a64 <turnLeft>
				case 1: turnRight();
 8000be4:	f7ff ff62 	bl	8000aac <turnRight>
				}
			}
			case FL: {
				switch(choice){
 8000be8:	797b      	ldrb	r3, [r7, #5]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <solveMaze+0x100>
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d002      	beq.n	8000bf8 <solveMaze+0x104>
 8000bf2:	e003      	b.n	8000bfc <solveMaze+0x108>
				case 0: moveForward();
 8000bf4:	f7ff ff1c 	bl	8000a30 <moveForward>
				case 1: turnLeft();
 8000bf8:	f7ff ff34 	bl	8000a64 <turnLeft>
				}
			}
			case FR:{
				switch(choice){
 8000bfc:	797b      	ldrb	r3, [r7, #5]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <solveMaze+0x114>
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d002      	beq.n	8000c0c <solveMaze+0x118>
 8000c06:	e003      	b.n	8000c10 <solveMaze+0x11c>
				case 0: moveForward();
 8000c08:	f7ff ff12 	bl	8000a30 <moveForward>
				case 1: turnLeft();
 8000c0c:	f7ff ff2a 	bl	8000a64 <turnLeft>
				}
			}
			case F: moveForward();
 8000c10:	f7ff ff0e 	bl	8000a30 <moveForward>
			case L: turnLeft();
 8000c14:	f7ff ff26 	bl	8000a64 <turnLeft>
			case R: turnRight();
 8000c18:	f7ff ff48 	bl	8000aac <turnRight>
			case DeadEnd: {
				turnRight();
 8000c1c:	f7ff ff46 	bl	8000aac <turnRight>
				turnRight();
 8000c20:	f7ff ff44 	bl	8000aac <turnRight>
 8000c24:	e769      	b.n	8000afa <solveMaze+0x6>
 8000c26:	bf00      	nop
 8000c28:	20000084 	.word	0x20000084
 8000c2c:	40020000 	.word	0x40020000

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <Error_Handler+0x8>

08000c3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c7a:	2007      	movs	r0, #7
 8000c7c:	f000 ff46 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a17      	ldr	r2, [pc, #92]	@ (8000d08 <HAL_ADC_MspInit+0x7c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d127      	bne.n	8000cfe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <HAL_ADC_MspInit+0x80>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	4a15      	ldr	r2, [pc, #84]	@ (8000d0c <HAL_ADC_MspInit+0x80>)
 8000cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <HAL_ADC_MspInit+0x80>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <HAL_ADC_MspInit+0x80>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d0c <HAL_ADC_MspInit+0x80>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <HAL_ADC_MspInit+0x80>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6;
 8000ce6:	2351      	movs	r3, #81	@ 0x51
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cea:	2303      	movs	r3, #3
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <HAL_ADC_MspInit+0x84>)
 8000cfa:	f000 ff3b 	bl	8001b74 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	@ 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40012000 	.word	0x40012000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d24:	d10d      	bne.n	8000d42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <HAL_TIM_Base_MspInit+0x3c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_TIM_Base_MspInit+0x3c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_TIM_Base_MspInit+0x3c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d74:	d11e      	bne.n	8000db4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <HAL_TIM_MspPostInit+0x68>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dbc <HAL_TIM_MspPostInit+0x68>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <HAL_TIM_MspPostInit+0x68>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000d92:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000d96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4619      	mov	r1, r3
 8000dae:	4804      	ldr	r0, [pc, #16]	@ (8000dc0 <HAL_TIM_MspPostInit+0x6c>)
 8000db0:	f000 fee0 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <HAL_UART_MspInit+0x84>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d12b      	bne.n	8000e3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <HAL_UART_MspInit+0x88>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <HAL_UART_MspInit+0x88>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <HAL_UART_MspInit+0x88>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_UART_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a10      	ldr	r2, [pc, #64]	@ (8000e4c <HAL_UART_MspInit+0x88>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_UART_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <HAL_UART_MspInit+0x8c>)
 8000e3a:	f000 fe9b 	bl	8001b74 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <NMI_Handler+0x4>

08000e5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eaa:	f000 f957 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  return 1;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <_kill>:

int _kill(int pid, int sig)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ecc:	f002 ff06 	bl	8003cdc <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2216      	movs	r2, #22
 8000ed4:	601a      	str	r2, [r3, #0]
  return -1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_exit>:

void _exit (int status)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eea:	f04f 31ff 	mov.w	r1, #4294967295
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffe7 	bl	8000ec2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <_exit+0x12>

08000ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00a      	b.n	8000f20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f0a:	f3af 8000 	nop.w
 8000f0e:	4601      	mov	r1, r0
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbf0      	blt.n	8000f0a <_read+0x12>
  }

  return len;
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e009      	b.n	8000f58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf1      	blt.n	8000f44 <_write+0x12>
  }
  return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_close>:

int _close(int file)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f92:	605a      	str	r2, [r3, #4]
  return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_isatty>:

int _isatty(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	@ (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f002 fe6a 	bl	8003cdc <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20018000 	.word	0x20018000
 8001034:	00000400 	.word	0x00000400
 8001038:	20000160 	.word	0x20000160
 800103c:	200002b8 	.word	0x200002b8

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800109c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001068:	f7ff ffea 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800106c:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106e:	490d      	ldr	r1, [pc, #52]	@ (80010a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001070:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001084:	4c0a      	ldr	r4, [pc, #40]	@ (80010b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001092:	f002 fe29 	bl	8003ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fa6b 	bl	8000570 <main>
  bx  lr    
 800109a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800109c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010a8:	08004a94 	.word	0x08004a94
  ldr r2, =_sbss
 80010ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010b0:	200002b4 	.word	0x200002b4

080010b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <HAL_Init+0x40>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <HAL_Init+0x40>)
 80010ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <HAL_Init+0x40>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 fd13 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fda6 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fd1d 	bl	8001b5a <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 fcf3 	bl	8001b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	@ (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	20000164 	.word	0x20000164

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000164 	.word	0x20000164

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008

080011e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e033      	b.n	8001262 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fd42 	bl	8000c8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	2b00      	cmp	r3, #0
 8001220:	d118      	bne.n	8001254 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800122a:	f023 0302 	bic.w	r3, r3, #2
 800122e:	f043 0202 	orr.w	r2, r3, #2
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 faba 	bl	80017b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	f023 0303 	bic.w	r3, r3, #3
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	641a      	str	r2, [r3, #64]	@ 0x40
 8001252:	e001      	b.n	8001258 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <HAL_ADC_Start+0x1a>
 8001282:	2302      	movs	r3, #2
 8001284:	e097      	b.n	80013b6 <HAL_ADC_Start+0x14a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b01      	cmp	r3, #1
 800129a:	d018      	beq.n	80012ce <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012ac:	4b45      	ldr	r3, [pc, #276]	@ (80013c4 <HAL_ADC_Start+0x158>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a45      	ldr	r2, [pc, #276]	@ (80013c8 <HAL_ADC_Start+0x15c>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	0c9a      	lsrs	r2, r3, #18
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012c0:	e002      	b.n	80012c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f9      	bne.n	80012c2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d15f      	bne.n	800139c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d007      	beq.n	800130e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001306:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800131a:	d106      	bne.n	800132a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001320:	f023 0206 	bic.w	r2, r3, #6
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	645a      	str	r2, [r3, #68]	@ 0x44
 8001328:	e002      	b.n	8001330 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001338:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <HAL_ADC_Start+0x160>)
 800133a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001344:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10f      	bne.n	8001372 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d129      	bne.n	80013b4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	e020      	b.n	80013b4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a16      	ldr	r2, [pc, #88]	@ (80013d0 <HAL_ADC_Start+0x164>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d11b      	bne.n	80013b4 <HAL_ADC_Start+0x148>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d114      	bne.n	80013b4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	e00b      	b.n	80013b4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a0:	f043 0210 	orr.w	r2, r3, #16
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ac:	f043 0201 	orr.w	r2, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000000 	.word	0x20000000
 80013c8:	431bde83 	.word	0x431bde83
 80013cc:	40012300 	.word	0x40012300
 80013d0:	40012000 	.word	0x40012000

080013d4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Stop+0x16>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e021      	b.n	800142e <HAL_ADC_Stop+0x5a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0201 	bic.w	r2, r2, #1
 8001400:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d109      	bne.n	8001424 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001418:	f023 0301 	bic.w	r3, r3, #1
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001456:	d113      	bne.n	8001480 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001466:	d10b      	bne.n	8001480 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	f043 0220 	orr.w	r2, r3, #32
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e063      	b.n	8001548 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001480:	f7ff fe80 	bl	8001184 <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001486:	e021      	b.n	80014cc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148e:	d01d      	beq.n	80014cc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <HAL_ADC_PollForConversion+0x6c>
 8001496:	f7ff fe75 	bl	8001184 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d212      	bcs.n	80014cc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d00b      	beq.n	80014cc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	f043 0204 	orr.w	r2, r3, #4
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e03d      	b.n	8001548 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d1d6      	bne.n	8001488 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f06f 0212 	mvn.w	r2, #18
 80014e2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d123      	bne.n	8001546 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001502:	2b00      	cmp	r3, #0
 8001504:	d11f      	bne.n	8001546 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800151e:	2b00      	cmp	r3, #0
 8001520:	d111      	bne.n	8001546 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d105      	bne.n	8001546 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f043 0201 	orr.w	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1c>
 8001584:	2302      	movs	r3, #2
 8001586:	e105      	b.n	8001794 <HAL_ADC_ConfigChannel+0x228>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b09      	cmp	r3, #9
 8001596:	d925      	bls.n	80015e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68d9      	ldr	r1, [r3, #12]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	4613      	mov	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	3b1e      	subs	r3, #30
 80015ae:	2207      	movs	r2, #7
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43da      	mvns	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	400a      	ands	r2, r1
 80015bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68d9      	ldr	r1, [r3, #12]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	4603      	mov	r3, r0
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4403      	add	r3, r0
 80015d6:	3b1e      	subs	r3, #30
 80015d8:	409a      	lsls	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	e022      	b.n	800162a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6919      	ldr	r1, [r3, #16]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	2207      	movs	r2, #7
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	400a      	ands	r2, r1
 8001606:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6919      	ldr	r1, [r3, #16]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	4603      	mov	r3, r0
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4403      	add	r3, r0
 8001620:	409a      	lsls	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b06      	cmp	r3, #6
 8001630:	d824      	bhi.n	800167c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	3b05      	subs	r3, #5
 8001644:	221f      	movs	r2, #31
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	400a      	ands	r2, r1
 8001652:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	3b05      	subs	r3, #5
 800166e:	fa00 f203 	lsl.w	r2, r0, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	635a      	str	r2, [r3, #52]	@ 0x34
 800167a:	e04c      	b.n	8001716 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b0c      	cmp	r3, #12
 8001682:	d824      	bhi.n	80016ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	3b23      	subs	r3, #35	@ 0x23
 8001696:	221f      	movs	r2, #31
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43da      	mvns	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	400a      	ands	r2, r1
 80016a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	3b23      	subs	r3, #35	@ 0x23
 80016c0:	fa00 f203 	lsl.w	r2, r0, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80016cc:	e023      	b.n	8001716 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	3b41      	subs	r3, #65	@ 0x41
 80016e0:	221f      	movs	r2, #31
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	400a      	ands	r2, r1
 80016ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	3b41      	subs	r3, #65	@ 0x41
 800170a:	fa00 f203 	lsl.w	r2, r0, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001716:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <HAL_ADC_ConfigChannel+0x234>)
 8001718:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a21      	ldr	r2, [pc, #132]	@ (80017a4 <HAL_ADC_ConfigChannel+0x238>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d109      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x1cc>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b12      	cmp	r3, #18
 800172a:	d105      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a19      	ldr	r2, [pc, #100]	@ (80017a4 <HAL_ADC_ConfigChannel+0x238>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d123      	bne.n	800178a <HAL_ADC_ConfigChannel+0x21e>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b10      	cmp	r3, #16
 8001748:	d003      	beq.n	8001752 <HAL_ADC_ConfigChannel+0x1e6>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b11      	cmp	r3, #17
 8001750:	d11b      	bne.n	800178a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b10      	cmp	r3, #16
 8001764:	d111      	bne.n	800178a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_ADC_ConfigChannel+0x23c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a10      	ldr	r2, [pc, #64]	@ (80017ac <HAL_ADC_ConfigChannel+0x240>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	0c9a      	lsrs	r2, r3, #18
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800177c:	e002      	b.n	8001784 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3b01      	subs	r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f9      	bne.n	800177e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40012300 	.word	0x40012300
 80017a4:	40012000 	.word	0x40012000
 80017a8:	20000000 	.word	0x20000000
 80017ac:	431bde83 	.word	0x431bde83

080017b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b8:	4b79      	ldr	r3, [pc, #484]	@ (80019a0 <ADC_Init+0x1f0>)
 80017ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	431a      	orrs	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	021a      	lsls	r2, r3, #8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800182a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6899      	ldr	r1, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001842:	4a58      	ldr	r2, [pc, #352]	@ (80019a4 <ADC_Init+0x1f4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d022      	beq.n	800188e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001856:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6899      	ldr	r1, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001878:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6899      	ldr	r1, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	e00f      	b.n	80018ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800189c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0202 	bic.w	r2, r2, #2
 80018bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6899      	ldr	r1, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7e1b      	ldrb	r3, [r3, #24]
 80018c8:	005a      	lsls	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d01b      	beq.n	8001914 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6859      	ldr	r1, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001906:	3b01      	subs	r3, #1
 8001908:	035a      	lsls	r2, r3, #13
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	e007      	b.n	8001924 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001922:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001932:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	3b01      	subs	r3, #1
 8001940:	051a      	lsls	r2, r3, #20
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001958:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6899      	ldr	r1, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001966:	025a      	lsls	r2, r3, #9
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800197e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6899      	ldr	r1, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	029a      	lsls	r2, r3, #10
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	609a      	str	r2, [r3, #8]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40012300 	.word	0x40012300
 80019a4:	0f000001 	.word	0x0f000001

080019a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c4:	4013      	ands	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f4:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <__NVIC_GetPriorityGrouping+0x18>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	f003 0307 	and.w	r3, r3, #7
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	@ (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	@ (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	@ 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ad8:	d301      	bcc.n	8001ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00f      	b.n	8001afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ade:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <SysTick_Config+0x40>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f7ff ff8e 	bl	8001a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <SysTick_Config+0x40>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <SysTick_Config+0x40>)
 8001af8:	2207      	movs	r2, #7
 8001afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	e000e010 	.word	0xe000e010

08001b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff47 	bl	80019a8 <__NVIC_SetPriorityGrouping>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff5c 	bl	80019f0 <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff8e 	bl	8001a60 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff5d 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffb0 	bl	8001ac8 <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e159      	b.n	8001e44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f040 8148 	bne.w	8001e3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d005      	beq.n	8001bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d130      	bne.n	8001c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 0201 	and.w	r2, r3, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d017      	beq.n	8001c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d123      	bne.n	8001cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	69b9      	ldr	r1, [r7, #24]
 8001cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0203 	and.w	r2, r3, #3
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a2 	beq.w	8001e3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b57      	ldr	r3, [pc, #348]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a56      	ldr	r2, [pc, #344]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b54      	ldr	r3, [pc, #336]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d16:	4a52      	ldr	r2, [pc, #328]	@ (8001e60 <HAL_GPIO_Init+0x2ec>)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a49      	ldr	r2, [pc, #292]	@ (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d019      	beq.n	8001d76 <HAL_GPIO_Init+0x202>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a48      	ldr	r2, [pc, #288]	@ (8001e68 <HAL_GPIO_Init+0x2f4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_Init+0x1fe>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a47      	ldr	r2, [pc, #284]	@ (8001e6c <HAL_GPIO_Init+0x2f8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00d      	beq.n	8001d6e <HAL_GPIO_Init+0x1fa>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a46      	ldr	r2, [pc, #280]	@ (8001e70 <HAL_GPIO_Init+0x2fc>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <HAL_GPIO_Init+0x1f6>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a45      	ldr	r2, [pc, #276]	@ (8001e74 <HAL_GPIO_Init+0x300>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_GPIO_Init+0x1f2>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e008      	b.n	8001d78 <HAL_GPIO_Init+0x204>
 8001d66:	2307      	movs	r3, #7
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x204>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e004      	b.n	8001d78 <HAL_GPIO_Init+0x204>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_Init+0x204>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x204>
 8001d76:	2300      	movs	r3, #0
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	f002 0203 	and.w	r2, r2, #3
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	4093      	lsls	r3, r2
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d88:	4935      	ldr	r1, [pc, #212]	@ (8001e60 <HAL_GPIO_Init+0x2ec>)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d96:	4b38      	ldr	r3, [pc, #224]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dba:	4a2f      	ldr	r2, [pc, #188]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de4:	4a24      	ldr	r2, [pc, #144]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dea:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e14:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e38:	4a0f      	ldr	r2, [pc, #60]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3301      	adds	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	2b0f      	cmp	r3, #15
 8001e48:	f67f aea2 	bls.w	8001b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3724      	adds	r7, #36	@ 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40013800 	.word	0x40013800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020c00 	.word	0x40020c00
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40013c00 	.word	0x40013c00

08001e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e98:	e003      	b.n	8001ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	041a      	lsls	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e267      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d075      	beq.n	8001fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ece:	4b88      	ldr	r3, [pc, #544]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d00c      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eda:	4b85      	ldr	r3, [pc, #532]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d112      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee6:	4b82      	ldr	r3, [pc, #520]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ef2:	d10b      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	4b7e      	ldr	r3, [pc, #504]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d05b      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x108>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d157      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e242      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f14:	d106      	bne.n	8001f24 <HAL_RCC_OscConfig+0x74>
 8001f16:	4b76      	ldr	r3, [pc, #472]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a75      	ldr	r2, [pc, #468]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e01d      	b.n	8001f60 <HAL_RCC_OscConfig+0xb0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x98>
 8001f2e:	4b70      	ldr	r3, [pc, #448]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6f      	ldr	r2, [pc, #444]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a6c      	ldr	r2, [pc, #432]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0xb0>
 8001f48:	4b69      	ldr	r3, [pc, #420]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a68      	ldr	r2, [pc, #416]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b66      	ldr	r3, [pc, #408]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a65      	ldr	r2, [pc, #404]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff f90c 	bl	8001184 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff f908 	bl	8001184 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	@ 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e207      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b5b      	ldr	r3, [pc, #364]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0xc0>
 8001f8e:	e014      	b.n	8001fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff f8f8 	bl	8001184 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff f8f4 	bl	8001184 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	@ 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1f3      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	4b51      	ldr	r3, [pc, #324]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0xe8>
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d063      	beq.n	800208e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd2:	4b47      	ldr	r3, [pc, #284]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d11c      	bne.n	8002018 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fde:	4b44      	ldr	r3, [pc, #272]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d116      	bne.n	8002018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	4b41      	ldr	r3, [pc, #260]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_RCC_OscConfig+0x152>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e1c7      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002002:	4b3b      	ldr	r3, [pc, #236]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4937      	ldr	r1, [pc, #220]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	e03a      	b.n	800208e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d020      	beq.n	8002062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002020:	4b34      	ldr	r3, [pc, #208]	@ (80020f4 <HAL_RCC_OscConfig+0x244>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff f8ad 	bl	8001184 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202e:	f7ff f8a9 	bl	8001184 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e1a8      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002040:	4b2b      	ldr	r3, [pc, #172]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b28      	ldr	r3, [pc, #160]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4925      	ldr	r1, [pc, #148]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
 8002060:	e015      	b.n	800208e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002062:	4b24      	ldr	r3, [pc, #144]	@ (80020f4 <HAL_RCC_OscConfig+0x244>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7ff f88c 	bl	8001184 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002070:	f7ff f888 	bl	8001184 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e187      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d036      	beq.n	8002108 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d016      	beq.n	80020d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a2:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <HAL_RCC_OscConfig+0x248>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7ff f86c 	bl	8001184 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b0:	f7ff f868 	bl	8001184 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e167      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <HAL_RCC_OscConfig+0x240>)
 80020c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x200>
 80020ce:	e01b      	b.n	8002108 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d0:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <HAL_RCC_OscConfig+0x248>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d6:	f7ff f855 	bl	8001184 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	e00e      	b.n	80020fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020de:	f7ff f851 	bl	8001184 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d907      	bls.n	80020fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e150      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
 80020f0:	40023800 	.word	0x40023800
 80020f4:	42470000 	.word	0x42470000
 80020f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fc:	4b88      	ldr	r3, [pc, #544]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 80020fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1ea      	bne.n	80020de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8097 	beq.w	8002244 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211a:	4b81      	ldr	r3, [pc, #516]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10f      	bne.n	8002146 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b7d      	ldr	r3, [pc, #500]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	4a7c      	ldr	r2, [pc, #496]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002134:	6413      	str	r3, [r2, #64]	@ 0x40
 8002136:	4b7a      	ldr	r3, [pc, #488]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002142:	2301      	movs	r3, #1
 8002144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	4b77      	ldr	r3, [pc, #476]	@ (8002324 <HAL_RCC_OscConfig+0x474>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d118      	bne.n	8002184 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002152:	4b74      	ldr	r3, [pc, #464]	@ (8002324 <HAL_RCC_OscConfig+0x474>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a73      	ldr	r2, [pc, #460]	@ (8002324 <HAL_RCC_OscConfig+0x474>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215e:	f7ff f811 	bl	8001184 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002166:	f7ff f80d 	bl	8001184 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e10c      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	4b6a      	ldr	r3, [pc, #424]	@ (8002324 <HAL_RCC_OscConfig+0x474>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d106      	bne.n	800219a <HAL_RCC_OscConfig+0x2ea>
 800218c:	4b64      	ldr	r3, [pc, #400]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002190:	4a63      	ldr	r2, [pc, #396]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6713      	str	r3, [r2, #112]	@ 0x70
 8002198:	e01c      	b.n	80021d4 <HAL_RCC_OscConfig+0x324>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b05      	cmp	r3, #5
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0x30c>
 80021a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0x324>
 80021bc:	4b58      	ldr	r3, [pc, #352]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 80021be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c0:	4a57      	ldr	r2, [pc, #348]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c8:	4b55      	ldr	r3, [pc, #340]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021cc:	4a54      	ldr	r2, [pc, #336]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 80021ce:	f023 0304 	bic.w	r3, r3, #4
 80021d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d015      	beq.n	8002208 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7fe ffd2 	bl	8001184 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e4:	f7fe ffce 	bl	8001184 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e0cb      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fa:	4b49      	ldr	r3, [pc, #292]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0ee      	beq.n	80021e4 <HAL_RCC_OscConfig+0x334>
 8002206:	e014      	b.n	8002232 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002208:	f7fe ffbc 	bl	8001184 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7fe ffb8 	bl	8001184 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e0b5      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002226:	4b3e      	ldr	r3, [pc, #248]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1ee      	bne.n	8002210 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002232:	7dfb      	ldrb	r3, [r7, #23]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d105      	bne.n	8002244 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002238:	4b39      	ldr	r3, [pc, #228]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	4a38      	ldr	r2, [pc, #224]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 800223e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002242:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80a1 	beq.w	8002390 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800224e:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b08      	cmp	r3, #8
 8002258:	d05c      	beq.n	8002314 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d141      	bne.n	80022e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002262:	4b31      	ldr	r3, [pc, #196]	@ (8002328 <HAL_RCC_OscConfig+0x478>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe ff8c 	bl	8001184 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe ff88 	bl	8001184 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e087      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	4b27      	ldr	r3, [pc, #156]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	3b01      	subs	r3, #1
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b0:	061b      	lsls	r3, r3, #24
 80022b2:	491b      	ldr	r1, [pc, #108]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <HAL_RCC_OscConfig+0x478>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe ff61 	bl	8001184 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c6:	f7fe ff5d 	bl	8001184 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e05c      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x416>
 80022e4:	e054      	b.n	8002390 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e6:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <HAL_RCC_OscConfig+0x478>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7fe ff4a 	bl	8001184 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe ff46 	bl	8001184 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e045      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_RCC_OscConfig+0x470>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x444>
 8002312:	e03d      	b.n	8002390 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e038      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
 8002320:	40023800 	.word	0x40023800
 8002324:	40007000 	.word	0x40007000
 8002328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800232c:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <HAL_RCC_OscConfig+0x4ec>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d028      	beq.n	800238c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d121      	bne.n	800238c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d11a      	bne.n	800238c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800235c:	4013      	ands	r3, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002364:	4293      	cmp	r3, r2
 8002366:	d111      	bne.n	800238c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	3b01      	subs	r3, #1
 8002376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d107      	bne.n	800238c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800

080023a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0cc      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b68      	ldr	r3, [pc, #416]	@ (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d90c      	bls.n	80023dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b65      	ldr	r3, [pc, #404]	@ (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b63      	ldr	r3, [pc, #396]	@ (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0b8      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b59      	ldr	r3, [pc, #356]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a58      	ldr	r2, [pc, #352]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800240c:	4b53      	ldr	r3, [pc, #332]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a52      	ldr	r2, [pc, #328]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b50      	ldr	r3, [pc, #320]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	494d      	ldr	r1, [pc, #308]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d044      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b47      	ldr	r3, [pc, #284]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d119      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e07f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d003      	beq.n	800245e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245a:	2b03      	cmp	r3, #3
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245e:	4b3f      	ldr	r3, [pc, #252]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e06f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	4b3b      	ldr	r3, [pc, #236]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e067      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4b37      	ldr	r3, [pc, #220]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4934      	ldr	r1, [pc, #208]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002490:	f7fe fe78 	bl	8001184 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe fe74 	bl	8001184 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e04f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b2b      	ldr	r3, [pc, #172]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1eb      	bne.n	8002498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b25      	ldr	r3, [pc, #148]	@ (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d20c      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b22      	ldr	r3, [pc, #136]	@ (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e032      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b19      	ldr	r3, [pc, #100]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4916      	ldr	r1, [pc, #88]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002512:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	490e      	ldr	r1, [pc, #56]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002526:	f000 f821 	bl	800256c <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490a      	ldr	r1, [pc, #40]	@ (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	4a09      	ldr	r2, [pc, #36]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002542:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fdd8 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00
 800255c:	40023800 	.word	0x40023800
 8002560:	0800498c 	.word	0x0800498c
 8002564:	20000000 	.word	0x20000000
 8002568:	20000004 	.word	0x20000004

0800256c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002570:	b094      	sub	sp, #80	@ 0x50
 8002572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002584:	4b79      	ldr	r3, [pc, #484]	@ (800276c <HAL_RCC_GetSysClockFreq+0x200>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d00d      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x40>
 8002590:	2b08      	cmp	r3, #8
 8002592:	f200 80e1 	bhi.w	8002758 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x34>
 800259a:	2b04      	cmp	r3, #4
 800259c:	d003      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800259e:	e0db      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b73      	ldr	r3, [pc, #460]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x204>)
 80025a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025a4:	e0db      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025a6:	4b73      	ldr	r3, [pc, #460]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x208>)
 80025a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025aa:	e0d8      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ac:	4b6f      	ldr	r3, [pc, #444]	@ (800276c <HAL_RCC_GetSysClockFreq+0x200>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b6:	4b6d      	ldr	r3, [pc, #436]	@ (800276c <HAL_RCC_GetSysClockFreq+0x200>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d063      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c2:	4b6a      	ldr	r3, [pc, #424]	@ (800276c <HAL_RCC_GetSysClockFreq+0x200>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	099b      	lsrs	r3, r3, #6
 80025c8:	2200      	movs	r2, #0
 80025ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025d6:	2300      	movs	r3, #0
 80025d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025de:	4622      	mov	r2, r4
 80025e0:	462b      	mov	r3, r5
 80025e2:	f04f 0000 	mov.w	r0, #0
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	0159      	lsls	r1, r3, #5
 80025ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f0:	0150      	lsls	r0, r2, #5
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4621      	mov	r1, r4
 80025f8:	1a51      	subs	r1, r2, r1
 80025fa:	6139      	str	r1, [r7, #16]
 80025fc:	4629      	mov	r1, r5
 80025fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002610:	4659      	mov	r1, fp
 8002612:	018b      	lsls	r3, r1, #6
 8002614:	4651      	mov	r1, sl
 8002616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800261a:	4651      	mov	r1, sl
 800261c:	018a      	lsls	r2, r1, #6
 800261e:	4651      	mov	r1, sl
 8002620:	ebb2 0801 	subs.w	r8, r2, r1
 8002624:	4659      	mov	r1, fp
 8002626:	eb63 0901 	sbc.w	r9, r3, r1
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800263a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800263e:	4690      	mov	r8, r2
 8002640:	4699      	mov	r9, r3
 8002642:	4623      	mov	r3, r4
 8002644:	eb18 0303 	adds.w	r3, r8, r3
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	462b      	mov	r3, r5
 800264c:	eb49 0303 	adc.w	r3, r9, r3
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800265e:	4629      	mov	r1, r5
 8002660:	024b      	lsls	r3, r1, #9
 8002662:	4621      	mov	r1, r4
 8002664:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002668:	4621      	mov	r1, r4
 800266a:	024a      	lsls	r2, r1, #9
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002672:	2200      	movs	r2, #0
 8002674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002676:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002678:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800267c:	f7fd fe00 	bl	8000280 <__aeabi_uldivmod>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4613      	mov	r3, r2
 8002686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002688:	e058      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268a:	4b38      	ldr	r3, [pc, #224]	@ (800276c <HAL_RCC_GetSysClockFreq+0x200>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	099b      	lsrs	r3, r3, #6
 8002690:	2200      	movs	r2, #0
 8002692:	4618      	mov	r0, r3
 8002694:	4611      	mov	r1, r2
 8002696:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800269a:	623b      	str	r3, [r7, #32]
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026a4:	4642      	mov	r2, r8
 80026a6:	464b      	mov	r3, r9
 80026a8:	f04f 0000 	mov.w	r0, #0
 80026ac:	f04f 0100 	mov.w	r1, #0
 80026b0:	0159      	lsls	r1, r3, #5
 80026b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b6:	0150      	lsls	r0, r2, #5
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4641      	mov	r1, r8
 80026be:	ebb2 0a01 	subs.w	sl, r2, r1
 80026c2:	4649      	mov	r1, r9
 80026c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026dc:	ebb2 040a 	subs.w	r4, r2, sl
 80026e0:	eb63 050b 	sbc.w	r5, r3, fp
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	00eb      	lsls	r3, r5, #3
 80026ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026f2:	00e2      	lsls	r2, r4, #3
 80026f4:	4614      	mov	r4, r2
 80026f6:	461d      	mov	r5, r3
 80026f8:	4643      	mov	r3, r8
 80026fa:	18e3      	adds	r3, r4, r3
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	464b      	mov	r3, r9
 8002700:	eb45 0303 	adc.w	r3, r5, r3
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002712:	4629      	mov	r1, r5
 8002714:	028b      	lsls	r3, r1, #10
 8002716:	4621      	mov	r1, r4
 8002718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800271c:	4621      	mov	r1, r4
 800271e:	028a      	lsls	r2, r1, #10
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002726:	2200      	movs	r2, #0
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	61fa      	str	r2, [r7, #28]
 800272c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002730:	f7fd fda6 	bl	8000280 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4613      	mov	r3, r2
 800273a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800273c:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <HAL_RCC_GetSysClockFreq+0x200>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	3301      	adds	r3, #1
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800274c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800274e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002756:	e002      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x204>)
 800275a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800275c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002760:	4618      	mov	r0, r3
 8002762:	3750      	adds	r7, #80	@ 0x50
 8002764:	46bd      	mov	sp, r7
 8002766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	00f42400 	.word	0x00f42400
 8002774:	007a1200 	.word	0x007a1200

08002778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800277c:	4b03      	ldr	r3, [pc, #12]	@ (800278c <HAL_RCC_GetHCLKFreq+0x14>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000000 	.word	0x20000000

08002790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002794:	f7ff fff0 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 8002798:	4602      	mov	r2, r0
 800279a:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	0a9b      	lsrs	r3, r3, #10
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	4903      	ldr	r1, [pc, #12]	@ (80027b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a6:	5ccb      	ldrb	r3, [r1, r3]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	0800499c 	.word	0x0800499c

080027b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027bc:	f7ff ffdc 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0b5b      	lsrs	r3, r3, #13
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4903      	ldr	r1, [pc, #12]	@ (80027dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	0800499c 	.word	0x0800499c

080027e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e041      	b.n	8002876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fa84 	bl	8000d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f000 fac0 	bl	8002da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e041      	b.n	8002914 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d106      	bne.n	80028aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f839 	bl	800291c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f000 fa71 	bl	8002da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_TIM_PWM_Start+0x24>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e022      	b.n	800299a <HAL_TIM_PWM_Start+0x6a>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b04      	cmp	r3, #4
 8002958:	d109      	bne.n	800296e <HAL_TIM_PWM_Start+0x3e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	bf14      	ite	ne
 8002966:	2301      	movne	r3, #1
 8002968:	2300      	moveq	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	e015      	b.n	800299a <HAL_TIM_PWM_Start+0x6a>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d109      	bne.n	8002988 <HAL_TIM_PWM_Start+0x58>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e008      	b.n	800299a <HAL_TIM_PWM_Start+0x6a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e068      	b.n	8002a74 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d104      	bne.n	80029b2 <HAL_TIM_PWM_Start+0x82>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029b0:	e013      	b.n	80029da <HAL_TIM_PWM_Start+0xaa>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d104      	bne.n	80029c2 <HAL_TIM_PWM_Start+0x92>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029c0:	e00b      	b.n	80029da <HAL_TIM_PWM_Start+0xaa>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d104      	bne.n	80029d2 <HAL_TIM_PWM_Start+0xa2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029d0:	e003      	b.n	80029da <HAL_TIM_PWM_Start+0xaa>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	6839      	ldr	r1, [r7, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fc90 	bl	8003308 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a23      	ldr	r2, [pc, #140]	@ (8002a7c <HAL_TIM_PWM_Start+0x14c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d107      	bne.n	8002a02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1d      	ldr	r2, [pc, #116]	@ (8002a7c <HAL_TIM_PWM_Start+0x14c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d018      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x10e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a14:	d013      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x10e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a19      	ldr	r2, [pc, #100]	@ (8002a80 <HAL_TIM_PWM_Start+0x150>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00e      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x10e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a17      	ldr	r2, [pc, #92]	@ (8002a84 <HAL_TIM_PWM_Start+0x154>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d009      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x10e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a16      	ldr	r2, [pc, #88]	@ (8002a88 <HAL_TIM_PWM_Start+0x158>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d004      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x10e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a14      	ldr	r2, [pc, #80]	@ (8002a8c <HAL_TIM_PWM_Start+0x15c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d111      	bne.n	8002a62 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b06      	cmp	r3, #6
 8002a4e:	d010      	beq.n	8002a72 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a60:	e007      	b.n	8002a72 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40000c00 	.word	0x40000c00
 8002a8c:	40014000 	.word	0x40014000

08002a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e0ae      	b.n	8002c0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	f200 809f 	bhi.w	8002bfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002abe:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac4:	08002af9 	.word	0x08002af9
 8002ac8:	08002bfd 	.word	0x08002bfd
 8002acc:	08002bfd 	.word	0x08002bfd
 8002ad0:	08002bfd 	.word	0x08002bfd
 8002ad4:	08002b39 	.word	0x08002b39
 8002ad8:	08002bfd 	.word	0x08002bfd
 8002adc:	08002bfd 	.word	0x08002bfd
 8002ae0:	08002bfd 	.word	0x08002bfd
 8002ae4:	08002b7b 	.word	0x08002b7b
 8002ae8:	08002bfd 	.word	0x08002bfd
 8002aec:	08002bfd 	.word	0x08002bfd
 8002af0:	08002bfd 	.word	0x08002bfd
 8002af4:	08002bbb 	.word	0x08002bbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f9dc 	bl	8002ebc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0208 	orr.w	r2, r2, #8
 8002b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0204 	bic.w	r2, r2, #4
 8002b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6999      	ldr	r1, [r3, #24]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	619a      	str	r2, [r3, #24]
      break;
 8002b36:	e064      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fa22 	bl	8002f88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6999      	ldr	r1, [r3, #24]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	021a      	lsls	r2, r3, #8
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	619a      	str	r2, [r3, #24]
      break;
 8002b78:	e043      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fa6d 	bl	8003060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0208 	orr.w	r2, r2, #8
 8002b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0204 	bic.w	r2, r2, #4
 8002ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69d9      	ldr	r1, [r3, #28]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	61da      	str	r2, [r3, #28]
      break;
 8002bb8:	e023      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fab7 	bl	8003134 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69d9      	ldr	r1, [r3, #28]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	021a      	lsls	r2, r3, #8
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	61da      	str	r2, [r3, #28]
      break;
 8002bfa:	e002      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8002c00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_TIM_ConfigClockSource+0x1c>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0b4      	b.n	8002d9a <HAL_TIM_ConfigClockSource+0x186>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c68:	d03e      	beq.n	8002ce8 <HAL_TIM_ConfigClockSource+0xd4>
 8002c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c6e:	f200 8087 	bhi.w	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c76:	f000 8086 	beq.w	8002d86 <HAL_TIM_ConfigClockSource+0x172>
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c7e:	d87f      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b70      	cmp	r3, #112	@ 0x70
 8002c82:	d01a      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0xa6>
 8002c84:	2b70      	cmp	r3, #112	@ 0x70
 8002c86:	d87b      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b60      	cmp	r3, #96	@ 0x60
 8002c8a:	d050      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x11a>
 8002c8c:	2b60      	cmp	r3, #96	@ 0x60
 8002c8e:	d877      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b50      	cmp	r3, #80	@ 0x50
 8002c92:	d03c      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0xfa>
 8002c94:	2b50      	cmp	r3, #80	@ 0x50
 8002c96:	d873      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b40      	cmp	r3, #64	@ 0x40
 8002c9a:	d058      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x13a>
 8002c9c:	2b40      	cmp	r3, #64	@ 0x40
 8002c9e:	d86f      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b30      	cmp	r3, #48	@ 0x30
 8002ca2:	d064      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x15a>
 8002ca4:	2b30      	cmp	r3, #48	@ 0x30
 8002ca6:	d86b      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d060      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x15a>
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d867      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d05c      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x15a>
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d05a      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x15a>
 8002cb8:	e062      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cca:	f000 fafd 	bl	80032c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	609a      	str	r2, [r3, #8]
      break;
 8002ce6:	e04f      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cf8:	f000 fae6 	bl	80032c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d0a:	609a      	str	r2, [r3, #8]
      break;
 8002d0c:	e03c      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f000 fa5a 	bl	80031d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2150      	movs	r1, #80	@ 0x50
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fab3 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 8002d2c:	e02c      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f000 fa79 	bl	8003232 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2160      	movs	r1, #96	@ 0x60
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 faa3 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 8002d4c:	e01c      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f000 fa3a 	bl	80031d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2140      	movs	r1, #64	@ 0x40
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fa93 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 8002d6c:	e00c      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f000 fa8a 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 8002d7e:	e003      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      break;
 8002d84:	e000      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ea0 <TIM_Base_SetConfig+0xfc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00f      	beq.n	8002ddc <TIM_Base_SetConfig+0x38>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc2:	d00b      	beq.n	8002ddc <TIM_Base_SetConfig+0x38>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a37      	ldr	r2, [pc, #220]	@ (8002ea4 <TIM_Base_SetConfig+0x100>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d007      	beq.n	8002ddc <TIM_Base_SetConfig+0x38>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a36      	ldr	r2, [pc, #216]	@ (8002ea8 <TIM_Base_SetConfig+0x104>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <TIM_Base_SetConfig+0x38>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a35      	ldr	r2, [pc, #212]	@ (8002eac <TIM_Base_SetConfig+0x108>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d108      	bne.n	8002dee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea0 <TIM_Base_SetConfig+0xfc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01b      	beq.n	8002e2e <TIM_Base_SetConfig+0x8a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfc:	d017      	beq.n	8002e2e <TIM_Base_SetConfig+0x8a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a28      	ldr	r2, [pc, #160]	@ (8002ea4 <TIM_Base_SetConfig+0x100>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <TIM_Base_SetConfig+0x8a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a27      	ldr	r2, [pc, #156]	@ (8002ea8 <TIM_Base_SetConfig+0x104>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00f      	beq.n	8002e2e <TIM_Base_SetConfig+0x8a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a26      	ldr	r2, [pc, #152]	@ (8002eac <TIM_Base_SetConfig+0x108>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00b      	beq.n	8002e2e <TIM_Base_SetConfig+0x8a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a25      	ldr	r2, [pc, #148]	@ (8002eb0 <TIM_Base_SetConfig+0x10c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0x8a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a24      	ldr	r2, [pc, #144]	@ (8002eb4 <TIM_Base_SetConfig+0x110>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x8a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a23      	ldr	r2, [pc, #140]	@ (8002eb8 <TIM_Base_SetConfig+0x114>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea0 <TIM_Base_SetConfig+0xfc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d103      	bne.n	8002e74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d105      	bne.n	8002e92 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	611a      	str	r2, [r3, #16]
  }
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40000800 	.word	0x40000800
 8002eac:	40000c00 	.word	0x40000c00
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40014400 	.word	0x40014400
 8002eb8:	40014800 	.word	0x40014800

08002ebc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f023 0201 	bic.w	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0303 	bic.w	r3, r3, #3
 8002ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f023 0302 	bic.w	r3, r3, #2
 8002f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a1c      	ldr	r2, [pc, #112]	@ (8002f84 <TIM_OC1_SetConfig+0xc8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d10c      	bne.n	8002f32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f023 0308 	bic.w	r3, r3, #8
 8002f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a13      	ldr	r2, [pc, #76]	@ (8002f84 <TIM_OC1_SetConfig+0xc8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d111      	bne.n	8002f5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	621a      	str	r2, [r3, #32]
}
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40010000 	.word	0x40010000

08002f88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f023 0210 	bic.w	r2, r3, #16
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	021b      	lsls	r3, r3, #8
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f023 0320 	bic.w	r3, r3, #32
 8002fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800305c <TIM_OC2_SetConfig+0xd4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d10d      	bne.n	8003004 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003002:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a15      	ldr	r2, [pc, #84]	@ (800305c <TIM_OC2_SetConfig+0xd4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d113      	bne.n	8003034 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003012:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800301a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	621a      	str	r2, [r3, #32]
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40010000 	.word	0x40010000

08003060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800308e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003130 <TIM_OC3_SetConfig+0xd0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d10d      	bne.n	80030da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a14      	ldr	r2, [pc, #80]	@ (8003130 <TIM_OC3_SetConfig+0xd0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d113      	bne.n	800310a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40010000 	.word	0x40010000

08003134 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800316a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800317e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	031b      	lsls	r3, r3, #12
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a10      	ldr	r2, [pc, #64]	@ (80031d0 <TIM_OC4_SetConfig+0x9c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d109      	bne.n	80031a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800319a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	019b      	lsls	r3, r3, #6
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010000 	.word	0x40010000

080031d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f023 0201 	bic.w	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f023 030a 	bic.w	r3, r3, #10
 8003210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	621a      	str	r2, [r3, #32]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003232:	b480      	push	{r7}
 8003234:	b087      	sub	sp, #28
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f023 0210 	bic.w	r2, r3, #16
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800325c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	031b      	lsls	r3, r3, #12
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800326e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	621a      	str	r2, [r3, #32]
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003292:	b480      	push	{r7}
 8003294:	b085      	sub	sp, #20
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f043 0307 	orr.w	r3, r3, #7
 80032b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	609a      	str	r2, [r3, #8]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	021a      	lsls	r2, r3, #8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	609a      	str	r2, [r3, #8]
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2201      	movs	r2, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1a      	ldr	r2, [r3, #32]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	43db      	mvns	r3, r3
 800332a:	401a      	ands	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	431a      	orrs	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	621a      	str	r2, [r3, #32]
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003368:	2302      	movs	r3, #2
 800336a:	e050      	b.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1c      	ldr	r2, [pc, #112]	@ (800341c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b8:	d013      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a18      	ldr	r2, [pc, #96]	@ (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a16      	ldr	r2, [pc, #88]	@ (8003424 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a15      	ldr	r2, [pc, #84]	@ (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a13      	ldr	r2, [pc, #76]	@ (800342c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10c      	bne.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40010000 	.word	0x40010000
 8003420:	40000400 	.word	0x40000400
 8003424:	40000800 	.word	0x40000800
 8003428:	40000c00 	.word	0x40000c00
 800342c:	40014000 	.word	0x40014000

08003430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e042      	b.n	80034c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fcb4 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2224      	movs	r2, #36	@ 0x24
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f82b 	bl	80034d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d4:	b0c0      	sub	sp, #256	@ 0x100
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ec:	68d9      	ldr	r1, [r3, #12]
 80034ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	ea40 0301 	orr.w	r3, r0, r1
 80034f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	431a      	orrs	r2, r3
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	431a      	orrs	r2, r3
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003528:	f021 010c 	bic.w	r1, r1, #12
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003536:	430b      	orrs	r3, r1
 8003538:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354a:	6999      	ldr	r1, [r3, #24]
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	ea40 0301 	orr.w	r3, r0, r1
 8003556:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4b8f      	ldr	r3, [pc, #572]	@ (800379c <UART_SetConfig+0x2cc>)
 8003560:	429a      	cmp	r2, r3
 8003562:	d005      	beq.n	8003570 <UART_SetConfig+0xa0>
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4b8d      	ldr	r3, [pc, #564]	@ (80037a0 <UART_SetConfig+0x2d0>)
 800356c:	429a      	cmp	r2, r3
 800356e:	d104      	bne.n	800357a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003570:	f7ff f922 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 8003574:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003578:	e003      	b.n	8003582 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800357a:	f7ff f909 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 800357e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800358c:	f040 810c 	bne.w	80037a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003594:	2200      	movs	r2, #0
 8003596:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800359a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800359e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035a2:	4622      	mov	r2, r4
 80035a4:	462b      	mov	r3, r5
 80035a6:	1891      	adds	r1, r2, r2
 80035a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80035aa:	415b      	adcs	r3, r3
 80035ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035b2:	4621      	mov	r1, r4
 80035b4:	eb12 0801 	adds.w	r8, r2, r1
 80035b8:	4629      	mov	r1, r5
 80035ba:	eb43 0901 	adc.w	r9, r3, r1
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035d2:	4690      	mov	r8, r2
 80035d4:	4699      	mov	r9, r3
 80035d6:	4623      	mov	r3, r4
 80035d8:	eb18 0303 	adds.w	r3, r8, r3
 80035dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035e0:	462b      	mov	r3, r5
 80035e2:	eb49 0303 	adc.w	r3, r9, r3
 80035e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035fe:	460b      	mov	r3, r1
 8003600:	18db      	adds	r3, r3, r3
 8003602:	653b      	str	r3, [r7, #80]	@ 0x50
 8003604:	4613      	mov	r3, r2
 8003606:	eb42 0303 	adc.w	r3, r2, r3
 800360a:	657b      	str	r3, [r7, #84]	@ 0x54
 800360c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003610:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003614:	f7fc fe34 	bl	8000280 <__aeabi_uldivmod>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4b61      	ldr	r3, [pc, #388]	@ (80037a4 <UART_SetConfig+0x2d4>)
 800361e:	fba3 2302 	umull	r2, r3, r3, r2
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	011c      	lsls	r4, r3, #4
 8003626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003630:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003634:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003638:	4642      	mov	r2, r8
 800363a:	464b      	mov	r3, r9
 800363c:	1891      	adds	r1, r2, r2
 800363e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003640:	415b      	adcs	r3, r3
 8003642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003644:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003648:	4641      	mov	r1, r8
 800364a:	eb12 0a01 	adds.w	sl, r2, r1
 800364e:	4649      	mov	r1, r9
 8003650:	eb43 0b01 	adc.w	fp, r3, r1
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003660:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003664:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003668:	4692      	mov	sl, r2
 800366a:	469b      	mov	fp, r3
 800366c:	4643      	mov	r3, r8
 800366e:	eb1a 0303 	adds.w	r3, sl, r3
 8003672:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003676:	464b      	mov	r3, r9
 8003678:	eb4b 0303 	adc.w	r3, fp, r3
 800367c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800368c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003690:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003694:	460b      	mov	r3, r1
 8003696:	18db      	adds	r3, r3, r3
 8003698:	643b      	str	r3, [r7, #64]	@ 0x40
 800369a:	4613      	mov	r3, r2
 800369c:	eb42 0303 	adc.w	r3, r2, r3
 80036a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80036aa:	f7fc fde9 	bl	8000280 <__aeabi_uldivmod>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	4b3b      	ldr	r3, [pc, #236]	@ (80037a4 <UART_SetConfig+0x2d4>)
 80036b6:	fba3 2301 	umull	r2, r3, r3, r1
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	2264      	movs	r2, #100	@ 0x64
 80036be:	fb02 f303 	mul.w	r3, r2, r3
 80036c2:	1acb      	subs	r3, r1, r3
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036ca:	4b36      	ldr	r3, [pc, #216]	@ (80037a4 <UART_SetConfig+0x2d4>)
 80036cc:	fba3 2302 	umull	r2, r3, r3, r2
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036d8:	441c      	add	r4, r3
 80036da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80036e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036ec:	4642      	mov	r2, r8
 80036ee:	464b      	mov	r3, r9
 80036f0:	1891      	adds	r1, r2, r2
 80036f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036f4:	415b      	adcs	r3, r3
 80036f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036fc:	4641      	mov	r1, r8
 80036fe:	1851      	adds	r1, r2, r1
 8003700:	6339      	str	r1, [r7, #48]	@ 0x30
 8003702:	4649      	mov	r1, r9
 8003704:	414b      	adcs	r3, r1
 8003706:	637b      	str	r3, [r7, #52]	@ 0x34
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003714:	4659      	mov	r1, fp
 8003716:	00cb      	lsls	r3, r1, #3
 8003718:	4651      	mov	r1, sl
 800371a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800371e:	4651      	mov	r1, sl
 8003720:	00ca      	lsls	r2, r1, #3
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	4603      	mov	r3, r0
 8003728:	4642      	mov	r2, r8
 800372a:	189b      	adds	r3, r3, r2
 800372c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003730:	464b      	mov	r3, r9
 8003732:	460a      	mov	r2, r1
 8003734:	eb42 0303 	adc.w	r3, r2, r3
 8003738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003748:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800374c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003750:	460b      	mov	r3, r1
 8003752:	18db      	adds	r3, r3, r3
 8003754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003756:	4613      	mov	r3, r2
 8003758:	eb42 0303 	adc.w	r3, r2, r3
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800375e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003762:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003766:	f7fc fd8b 	bl	8000280 <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <UART_SetConfig+0x2d4>)
 8003770:	fba3 1302 	umull	r1, r3, r3, r2
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	2164      	movs	r1, #100	@ 0x64
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	3332      	adds	r3, #50	@ 0x32
 8003782:	4a08      	ldr	r2, [pc, #32]	@ (80037a4 <UART_SetConfig+0x2d4>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	f003 0207 	and.w	r2, r3, #7
 800378e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4422      	add	r2, r4
 8003796:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003798:	e106      	b.n	80039a8 <UART_SetConfig+0x4d8>
 800379a:	bf00      	nop
 800379c:	40011000 	.word	0x40011000
 80037a0:	40011400 	.word	0x40011400
 80037a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ac:	2200      	movs	r2, #0
 80037ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037ba:	4642      	mov	r2, r8
 80037bc:	464b      	mov	r3, r9
 80037be:	1891      	adds	r1, r2, r2
 80037c0:	6239      	str	r1, [r7, #32]
 80037c2:	415b      	adcs	r3, r3
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ca:	4641      	mov	r1, r8
 80037cc:	1854      	adds	r4, r2, r1
 80037ce:	4649      	mov	r1, r9
 80037d0:	eb43 0501 	adc.w	r5, r3, r1
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	00eb      	lsls	r3, r5, #3
 80037de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037e2:	00e2      	lsls	r2, r4, #3
 80037e4:	4614      	mov	r4, r2
 80037e6:	461d      	mov	r5, r3
 80037e8:	4643      	mov	r3, r8
 80037ea:	18e3      	adds	r3, r4, r3
 80037ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037f0:	464b      	mov	r3, r9
 80037f2:	eb45 0303 	adc.w	r3, r5, r3
 80037f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003806:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003816:	4629      	mov	r1, r5
 8003818:	008b      	lsls	r3, r1, #2
 800381a:	4621      	mov	r1, r4
 800381c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003820:	4621      	mov	r1, r4
 8003822:	008a      	lsls	r2, r1, #2
 8003824:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003828:	f7fc fd2a 	bl	8000280 <__aeabi_uldivmod>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4b60      	ldr	r3, [pc, #384]	@ (80039b4 <UART_SetConfig+0x4e4>)
 8003832:	fba3 2302 	umull	r2, r3, r3, r2
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	011c      	lsls	r4, r3, #4
 800383a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800383e:	2200      	movs	r2, #0
 8003840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003844:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003848:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800384c:	4642      	mov	r2, r8
 800384e:	464b      	mov	r3, r9
 8003850:	1891      	adds	r1, r2, r2
 8003852:	61b9      	str	r1, [r7, #24]
 8003854:	415b      	adcs	r3, r3
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800385c:	4641      	mov	r1, r8
 800385e:	1851      	adds	r1, r2, r1
 8003860:	6139      	str	r1, [r7, #16]
 8003862:	4649      	mov	r1, r9
 8003864:	414b      	adcs	r3, r1
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003874:	4659      	mov	r1, fp
 8003876:	00cb      	lsls	r3, r1, #3
 8003878:	4651      	mov	r1, sl
 800387a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800387e:	4651      	mov	r1, sl
 8003880:	00ca      	lsls	r2, r1, #3
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	4603      	mov	r3, r0
 8003888:	4642      	mov	r2, r8
 800388a:	189b      	adds	r3, r3, r2
 800388c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003890:	464b      	mov	r3, r9
 8003892:	460a      	mov	r2, r1
 8003894:	eb42 0303 	adc.w	r3, r2, r3
 8003898:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038b4:	4649      	mov	r1, r9
 80038b6:	008b      	lsls	r3, r1, #2
 80038b8:	4641      	mov	r1, r8
 80038ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038be:	4641      	mov	r1, r8
 80038c0:	008a      	lsls	r2, r1, #2
 80038c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038c6:	f7fc fcdb 	bl	8000280 <__aeabi_uldivmod>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4611      	mov	r1, r2
 80038d0:	4b38      	ldr	r3, [pc, #224]	@ (80039b4 <UART_SetConfig+0x4e4>)
 80038d2:	fba3 2301 	umull	r2, r3, r3, r1
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2264      	movs	r2, #100	@ 0x64
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	1acb      	subs	r3, r1, r3
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	3332      	adds	r3, #50	@ 0x32
 80038e4:	4a33      	ldr	r2, [pc, #204]	@ (80039b4 <UART_SetConfig+0x4e4>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038f0:	441c      	add	r4, r3
 80038f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038f6:	2200      	movs	r2, #0
 80038f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80038fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80038fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003900:	4642      	mov	r2, r8
 8003902:	464b      	mov	r3, r9
 8003904:	1891      	adds	r1, r2, r2
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	415b      	adcs	r3, r3
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003910:	4641      	mov	r1, r8
 8003912:	1851      	adds	r1, r2, r1
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	4649      	mov	r1, r9
 8003918:	414b      	adcs	r3, r1
 800391a:	607b      	str	r3, [r7, #4]
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003928:	4659      	mov	r1, fp
 800392a:	00cb      	lsls	r3, r1, #3
 800392c:	4651      	mov	r1, sl
 800392e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003932:	4651      	mov	r1, sl
 8003934:	00ca      	lsls	r2, r1, #3
 8003936:	4610      	mov	r0, r2
 8003938:	4619      	mov	r1, r3
 800393a:	4603      	mov	r3, r0
 800393c:	4642      	mov	r2, r8
 800393e:	189b      	adds	r3, r3, r2
 8003940:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003942:	464b      	mov	r3, r9
 8003944:	460a      	mov	r2, r1
 8003946:	eb42 0303 	adc.w	r3, r2, r3
 800394a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	663b      	str	r3, [r7, #96]	@ 0x60
 8003956:	667a      	str	r2, [r7, #100]	@ 0x64
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003964:	4649      	mov	r1, r9
 8003966:	008b      	lsls	r3, r1, #2
 8003968:	4641      	mov	r1, r8
 800396a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800396e:	4641      	mov	r1, r8
 8003970:	008a      	lsls	r2, r1, #2
 8003972:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003976:	f7fc fc83 	bl	8000280 <__aeabi_uldivmod>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4b0d      	ldr	r3, [pc, #52]	@ (80039b4 <UART_SetConfig+0x4e4>)
 8003980:	fba3 1302 	umull	r1, r3, r3, r2
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	2164      	movs	r1, #100	@ 0x64
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	3332      	adds	r3, #50	@ 0x32
 8003992:	4a08      	ldr	r2, [pc, #32]	@ (80039b4 <UART_SetConfig+0x4e4>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	f003 020f 	and.w	r2, r3, #15
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4422      	add	r2, r4
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	bf00      	nop
 80039aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039ae:	46bd      	mov	sp, r7
 80039b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039b4:	51eb851f 	.word	0x51eb851f

080039b8 <rand>:
 80039b8:	4b16      	ldr	r3, [pc, #88]	@ (8003a14 <rand+0x5c>)
 80039ba:	b510      	push	{r4, lr}
 80039bc:	681c      	ldr	r4, [r3, #0]
 80039be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80039c0:	b9b3      	cbnz	r3, 80039f0 <rand+0x38>
 80039c2:	2018      	movs	r0, #24
 80039c4:	f000 fa20 	bl	8003e08 <malloc>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6320      	str	r0, [r4, #48]	@ 0x30
 80039cc:	b920      	cbnz	r0, 80039d8 <rand+0x20>
 80039ce:	4b12      	ldr	r3, [pc, #72]	@ (8003a18 <rand+0x60>)
 80039d0:	4812      	ldr	r0, [pc, #72]	@ (8003a1c <rand+0x64>)
 80039d2:	2152      	movs	r1, #82	@ 0x52
 80039d4:	f000 f9b0 	bl	8003d38 <__assert_func>
 80039d8:	4911      	ldr	r1, [pc, #68]	@ (8003a20 <rand+0x68>)
 80039da:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <rand+0x6c>)
 80039dc:	e9c0 1300 	strd	r1, r3, [r0]
 80039e0:	4b11      	ldr	r3, [pc, #68]	@ (8003a28 <rand+0x70>)
 80039e2:	6083      	str	r3, [r0, #8]
 80039e4:	230b      	movs	r3, #11
 80039e6:	8183      	strh	r3, [r0, #12]
 80039e8:	2100      	movs	r1, #0
 80039ea:	2001      	movs	r0, #1
 80039ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80039f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80039f2:	480e      	ldr	r0, [pc, #56]	@ (8003a2c <rand+0x74>)
 80039f4:	690b      	ldr	r3, [r1, #16]
 80039f6:	694c      	ldr	r4, [r1, #20]
 80039f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003a30 <rand+0x78>)
 80039fa:	4358      	muls	r0, r3
 80039fc:	fb02 0004 	mla	r0, r2, r4, r0
 8003a00:	fba3 3202 	umull	r3, r2, r3, r2
 8003a04:	3301      	adds	r3, #1
 8003a06:	eb40 0002 	adc.w	r0, r0, r2
 8003a0a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003a0e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003a12:	bd10      	pop	{r4, pc}
 8003a14:	20000018 	.word	0x20000018
 8003a18:	080049a4 	.word	0x080049a4
 8003a1c:	080049bb 	.word	0x080049bb
 8003a20:	abcd330e 	.word	0xabcd330e
 8003a24:	e66d1234 	.word	0xe66d1234
 8003a28:	0005deec 	.word	0x0005deec
 8003a2c:	5851f42d 	.word	0x5851f42d
 8003a30:	4c957f2d 	.word	0x4c957f2d

08003a34 <std>:
 8003a34:	2300      	movs	r3, #0
 8003a36:	b510      	push	{r4, lr}
 8003a38:	4604      	mov	r4, r0
 8003a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8003a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a42:	6083      	str	r3, [r0, #8]
 8003a44:	8181      	strh	r1, [r0, #12]
 8003a46:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a48:	81c2      	strh	r2, [r0, #14]
 8003a4a:	6183      	str	r3, [r0, #24]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	2208      	movs	r2, #8
 8003a50:	305c      	adds	r0, #92	@ 0x5c
 8003a52:	f000 f8f4 	bl	8003c3e <memset>
 8003a56:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <std+0x58>)
 8003a58:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a90 <std+0x5c>)
 8003a5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <std+0x60>)
 8003a60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a62:	4b0d      	ldr	r3, [pc, #52]	@ (8003a98 <std+0x64>)
 8003a64:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a66:	4b0d      	ldr	r3, [pc, #52]	@ (8003a9c <std+0x68>)
 8003a68:	6224      	str	r4, [r4, #32]
 8003a6a:	429c      	cmp	r4, r3
 8003a6c:	d006      	beq.n	8003a7c <std+0x48>
 8003a6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003a72:	4294      	cmp	r4, r2
 8003a74:	d002      	beq.n	8003a7c <std+0x48>
 8003a76:	33d0      	adds	r3, #208	@ 0xd0
 8003a78:	429c      	cmp	r4, r3
 8003a7a:	d105      	bne.n	8003a88 <std+0x54>
 8003a7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a84:	f000 b954 	b.w	8003d30 <__retarget_lock_init_recursive>
 8003a88:	bd10      	pop	{r4, pc}
 8003a8a:	bf00      	nop
 8003a8c:	08003bb9 	.word	0x08003bb9
 8003a90:	08003bdb 	.word	0x08003bdb
 8003a94:	08003c13 	.word	0x08003c13
 8003a98:	08003c37 	.word	0x08003c37
 8003a9c:	20000168 	.word	0x20000168

08003aa0 <stdio_exit_handler>:
 8003aa0:	4a02      	ldr	r2, [pc, #8]	@ (8003aac <stdio_exit_handler+0xc>)
 8003aa2:	4903      	ldr	r1, [pc, #12]	@ (8003ab0 <stdio_exit_handler+0x10>)
 8003aa4:	4803      	ldr	r0, [pc, #12]	@ (8003ab4 <stdio_exit_handler+0x14>)
 8003aa6:	f000 b869 	b.w	8003b7c <_fwalk_sglue>
 8003aaa:	bf00      	nop
 8003aac:	2000000c 	.word	0x2000000c
 8003ab0:	0800407d 	.word	0x0800407d
 8003ab4:	2000001c 	.word	0x2000001c

08003ab8 <cleanup_stdio>:
 8003ab8:	6841      	ldr	r1, [r0, #4]
 8003aba:	4b0c      	ldr	r3, [pc, #48]	@ (8003aec <cleanup_stdio+0x34>)
 8003abc:	4299      	cmp	r1, r3
 8003abe:	b510      	push	{r4, lr}
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	d001      	beq.n	8003ac8 <cleanup_stdio+0x10>
 8003ac4:	f000 fada 	bl	800407c <_fflush_r>
 8003ac8:	68a1      	ldr	r1, [r4, #8]
 8003aca:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <cleanup_stdio+0x38>)
 8003acc:	4299      	cmp	r1, r3
 8003ace:	d002      	beq.n	8003ad6 <cleanup_stdio+0x1e>
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f000 fad3 	bl	800407c <_fflush_r>
 8003ad6:	68e1      	ldr	r1, [r4, #12]
 8003ad8:	4b06      	ldr	r3, [pc, #24]	@ (8003af4 <cleanup_stdio+0x3c>)
 8003ada:	4299      	cmp	r1, r3
 8003adc:	d004      	beq.n	8003ae8 <cleanup_stdio+0x30>
 8003ade:	4620      	mov	r0, r4
 8003ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ae4:	f000 baca 	b.w	800407c <_fflush_r>
 8003ae8:	bd10      	pop	{r4, pc}
 8003aea:	bf00      	nop
 8003aec:	20000168 	.word	0x20000168
 8003af0:	200001d0 	.word	0x200001d0
 8003af4:	20000238 	.word	0x20000238

08003af8 <global_stdio_init.part.0>:
 8003af8:	b510      	push	{r4, lr}
 8003afa:	4b0b      	ldr	r3, [pc, #44]	@ (8003b28 <global_stdio_init.part.0+0x30>)
 8003afc:	4c0b      	ldr	r4, [pc, #44]	@ (8003b2c <global_stdio_init.part.0+0x34>)
 8003afe:	4a0c      	ldr	r2, [pc, #48]	@ (8003b30 <global_stdio_init.part.0+0x38>)
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	4620      	mov	r0, r4
 8003b04:	2200      	movs	r2, #0
 8003b06:	2104      	movs	r1, #4
 8003b08:	f7ff ff94 	bl	8003a34 <std>
 8003b0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b10:	2201      	movs	r2, #1
 8003b12:	2109      	movs	r1, #9
 8003b14:	f7ff ff8e 	bl	8003a34 <std>
 8003b18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b22:	2112      	movs	r1, #18
 8003b24:	f7ff bf86 	b.w	8003a34 <std>
 8003b28:	200002a0 	.word	0x200002a0
 8003b2c:	20000168 	.word	0x20000168
 8003b30:	08003aa1 	.word	0x08003aa1

08003b34 <__sfp_lock_acquire>:
 8003b34:	4801      	ldr	r0, [pc, #4]	@ (8003b3c <__sfp_lock_acquire+0x8>)
 8003b36:	f000 b8fc 	b.w	8003d32 <__retarget_lock_acquire_recursive>
 8003b3a:	bf00      	nop
 8003b3c:	200002a9 	.word	0x200002a9

08003b40 <__sfp_lock_release>:
 8003b40:	4801      	ldr	r0, [pc, #4]	@ (8003b48 <__sfp_lock_release+0x8>)
 8003b42:	f000 b8f7 	b.w	8003d34 <__retarget_lock_release_recursive>
 8003b46:	bf00      	nop
 8003b48:	200002a9 	.word	0x200002a9

08003b4c <__sinit>:
 8003b4c:	b510      	push	{r4, lr}
 8003b4e:	4604      	mov	r4, r0
 8003b50:	f7ff fff0 	bl	8003b34 <__sfp_lock_acquire>
 8003b54:	6a23      	ldr	r3, [r4, #32]
 8003b56:	b11b      	cbz	r3, 8003b60 <__sinit+0x14>
 8003b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b5c:	f7ff bff0 	b.w	8003b40 <__sfp_lock_release>
 8003b60:	4b04      	ldr	r3, [pc, #16]	@ (8003b74 <__sinit+0x28>)
 8003b62:	6223      	str	r3, [r4, #32]
 8003b64:	4b04      	ldr	r3, [pc, #16]	@ (8003b78 <__sinit+0x2c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f5      	bne.n	8003b58 <__sinit+0xc>
 8003b6c:	f7ff ffc4 	bl	8003af8 <global_stdio_init.part.0>
 8003b70:	e7f2      	b.n	8003b58 <__sinit+0xc>
 8003b72:	bf00      	nop
 8003b74:	08003ab9 	.word	0x08003ab9
 8003b78:	200002a0 	.word	0x200002a0

08003b7c <_fwalk_sglue>:
 8003b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b80:	4607      	mov	r7, r0
 8003b82:	4688      	mov	r8, r1
 8003b84:	4614      	mov	r4, r2
 8003b86:	2600      	movs	r6, #0
 8003b88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b8c:	f1b9 0901 	subs.w	r9, r9, #1
 8003b90:	d505      	bpl.n	8003b9e <_fwalk_sglue+0x22>
 8003b92:	6824      	ldr	r4, [r4, #0]
 8003b94:	2c00      	cmp	r4, #0
 8003b96:	d1f7      	bne.n	8003b88 <_fwalk_sglue+0xc>
 8003b98:	4630      	mov	r0, r6
 8003b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b9e:	89ab      	ldrh	r3, [r5, #12]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d907      	bls.n	8003bb4 <_fwalk_sglue+0x38>
 8003ba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	d003      	beq.n	8003bb4 <_fwalk_sglue+0x38>
 8003bac:	4629      	mov	r1, r5
 8003bae:	4638      	mov	r0, r7
 8003bb0:	47c0      	blx	r8
 8003bb2:	4306      	orrs	r6, r0
 8003bb4:	3568      	adds	r5, #104	@ 0x68
 8003bb6:	e7e9      	b.n	8003b8c <_fwalk_sglue+0x10>

08003bb8 <__sread>:
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	460c      	mov	r4, r1
 8003bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc0:	f000 f868 	bl	8003c94 <_read_r>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	bfab      	itete	ge
 8003bc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003bca:	89a3      	ldrhlt	r3, [r4, #12]
 8003bcc:	181b      	addge	r3, r3, r0
 8003bce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003bd2:	bfac      	ite	ge
 8003bd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003bd6:	81a3      	strhlt	r3, [r4, #12]
 8003bd8:	bd10      	pop	{r4, pc}

08003bda <__swrite>:
 8003bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bde:	461f      	mov	r7, r3
 8003be0:	898b      	ldrh	r3, [r1, #12]
 8003be2:	05db      	lsls	r3, r3, #23
 8003be4:	4605      	mov	r5, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	4616      	mov	r6, r2
 8003bea:	d505      	bpl.n	8003bf8 <__swrite+0x1e>
 8003bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f000 f83c 	bl	8003c70 <_lseek_r>
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c02:	81a3      	strh	r3, [r4, #12]
 8003c04:	4632      	mov	r2, r6
 8003c06:	463b      	mov	r3, r7
 8003c08:	4628      	mov	r0, r5
 8003c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0e:	f000 b853 	b.w	8003cb8 <_write_r>

08003c12 <__sseek>:
 8003c12:	b510      	push	{r4, lr}
 8003c14:	460c      	mov	r4, r1
 8003c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c1a:	f000 f829 	bl	8003c70 <_lseek_r>
 8003c1e:	1c43      	adds	r3, r0, #1
 8003c20:	89a3      	ldrh	r3, [r4, #12]
 8003c22:	bf15      	itete	ne
 8003c24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003c26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003c2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003c2e:	81a3      	strheq	r3, [r4, #12]
 8003c30:	bf18      	it	ne
 8003c32:	81a3      	strhne	r3, [r4, #12]
 8003c34:	bd10      	pop	{r4, pc}

08003c36 <__sclose>:
 8003c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c3a:	f000 b809 	b.w	8003c50 <_close_r>

08003c3e <memset>:
 8003c3e:	4402      	add	r2, r0
 8003c40:	4603      	mov	r3, r0
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d100      	bne.n	8003c48 <memset+0xa>
 8003c46:	4770      	bx	lr
 8003c48:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4c:	e7f9      	b.n	8003c42 <memset+0x4>
	...

08003c50 <_close_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	4d06      	ldr	r5, [pc, #24]	@ (8003c6c <_close_r+0x1c>)
 8003c54:	2300      	movs	r3, #0
 8003c56:	4604      	mov	r4, r0
 8003c58:	4608      	mov	r0, r1
 8003c5a:	602b      	str	r3, [r5, #0]
 8003c5c:	f7fd f985 	bl	8000f6a <_close>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	d102      	bne.n	8003c6a <_close_r+0x1a>
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	b103      	cbz	r3, 8003c6a <_close_r+0x1a>
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	bd38      	pop	{r3, r4, r5, pc}
 8003c6c:	200002a4 	.word	0x200002a4

08003c70 <_lseek_r>:
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4d07      	ldr	r5, [pc, #28]	@ (8003c90 <_lseek_r+0x20>)
 8003c74:	4604      	mov	r4, r0
 8003c76:	4608      	mov	r0, r1
 8003c78:	4611      	mov	r1, r2
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	602a      	str	r2, [r5, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f7fd f99a 	bl	8000fb8 <_lseek>
 8003c84:	1c43      	adds	r3, r0, #1
 8003c86:	d102      	bne.n	8003c8e <_lseek_r+0x1e>
 8003c88:	682b      	ldr	r3, [r5, #0]
 8003c8a:	b103      	cbz	r3, 8003c8e <_lseek_r+0x1e>
 8003c8c:	6023      	str	r3, [r4, #0]
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
 8003c90:	200002a4 	.word	0x200002a4

08003c94 <_read_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4d07      	ldr	r5, [pc, #28]	@ (8003cb4 <_read_r+0x20>)
 8003c98:	4604      	mov	r4, r0
 8003c9a:	4608      	mov	r0, r1
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	602a      	str	r2, [r5, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f7fd f928 	bl	8000ef8 <_read>
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	d102      	bne.n	8003cb2 <_read_r+0x1e>
 8003cac:	682b      	ldr	r3, [r5, #0]
 8003cae:	b103      	cbz	r3, 8003cb2 <_read_r+0x1e>
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	bd38      	pop	{r3, r4, r5, pc}
 8003cb4:	200002a4 	.word	0x200002a4

08003cb8 <_write_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4d07      	ldr	r5, [pc, #28]	@ (8003cd8 <_write_r+0x20>)
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	4608      	mov	r0, r1
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	602a      	str	r2, [r5, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f7fd f933 	bl	8000f32 <_write>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d102      	bne.n	8003cd6 <_write_r+0x1e>
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	b103      	cbz	r3, 8003cd6 <_write_r+0x1e>
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	bd38      	pop	{r3, r4, r5, pc}
 8003cd8:	200002a4 	.word	0x200002a4

08003cdc <__errno>:
 8003cdc:	4b01      	ldr	r3, [pc, #4]	@ (8003ce4 <__errno+0x8>)
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000018 	.word	0x20000018

08003ce8 <__libc_init_array>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	4d0d      	ldr	r5, [pc, #52]	@ (8003d20 <__libc_init_array+0x38>)
 8003cec:	4c0d      	ldr	r4, [pc, #52]	@ (8003d24 <__libc_init_array+0x3c>)
 8003cee:	1b64      	subs	r4, r4, r5
 8003cf0:	10a4      	asrs	r4, r4, #2
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	42a6      	cmp	r6, r4
 8003cf6:	d109      	bne.n	8003d0c <__libc_init_array+0x24>
 8003cf8:	4d0b      	ldr	r5, [pc, #44]	@ (8003d28 <__libc_init_array+0x40>)
 8003cfa:	4c0c      	ldr	r4, [pc, #48]	@ (8003d2c <__libc_init_array+0x44>)
 8003cfc:	f000 fe3a 	bl	8004974 <_init>
 8003d00:	1b64      	subs	r4, r4, r5
 8003d02:	10a4      	asrs	r4, r4, #2
 8003d04:	2600      	movs	r6, #0
 8003d06:	42a6      	cmp	r6, r4
 8003d08:	d105      	bne.n	8003d16 <__libc_init_array+0x2e>
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d10:	4798      	blx	r3
 8003d12:	3601      	adds	r6, #1
 8003d14:	e7ee      	b.n	8003cf4 <__libc_init_array+0xc>
 8003d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1a:	4798      	blx	r3
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	e7f2      	b.n	8003d06 <__libc_init_array+0x1e>
 8003d20:	08004a8c 	.word	0x08004a8c
 8003d24:	08004a8c 	.word	0x08004a8c
 8003d28:	08004a8c 	.word	0x08004a8c
 8003d2c:	08004a90 	.word	0x08004a90

08003d30 <__retarget_lock_init_recursive>:
 8003d30:	4770      	bx	lr

08003d32 <__retarget_lock_acquire_recursive>:
 8003d32:	4770      	bx	lr

08003d34 <__retarget_lock_release_recursive>:
 8003d34:	4770      	bx	lr
	...

08003d38 <__assert_func>:
 8003d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d3a:	4614      	mov	r4, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <__assert_func+0x2c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4605      	mov	r5, r0
 8003d44:	68d8      	ldr	r0, [r3, #12]
 8003d46:	b954      	cbnz	r4, 8003d5e <__assert_func+0x26>
 8003d48:	4b07      	ldr	r3, [pc, #28]	@ (8003d68 <__assert_func+0x30>)
 8003d4a:	461c      	mov	r4, r3
 8003d4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003d50:	9100      	str	r1, [sp, #0]
 8003d52:	462b      	mov	r3, r5
 8003d54:	4905      	ldr	r1, [pc, #20]	@ (8003d6c <__assert_func+0x34>)
 8003d56:	f000 f9b9 	bl	80040cc <fiprintf>
 8003d5a:	f000 f9d9 	bl	8004110 <abort>
 8003d5e:	4b04      	ldr	r3, [pc, #16]	@ (8003d70 <__assert_func+0x38>)
 8003d60:	e7f4      	b.n	8003d4c <__assert_func+0x14>
 8003d62:	bf00      	nop
 8003d64:	20000018 	.word	0x20000018
 8003d68:	08004a4e 	.word	0x08004a4e
 8003d6c:	08004a20 	.word	0x08004a20
 8003d70:	08004a13 	.word	0x08004a13

08003d74 <_free_r>:
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	4605      	mov	r5, r0
 8003d78:	2900      	cmp	r1, #0
 8003d7a:	d041      	beq.n	8003e00 <_free_r+0x8c>
 8003d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d80:	1f0c      	subs	r4, r1, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bfb8      	it	lt
 8003d86:	18e4      	addlt	r4, r4, r3
 8003d88:	f000 f8e8 	bl	8003f5c <__malloc_lock>
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <_free_r+0x90>)
 8003d8e:	6813      	ldr	r3, [r2, #0]
 8003d90:	b933      	cbnz	r3, 8003da0 <_free_r+0x2c>
 8003d92:	6063      	str	r3, [r4, #4]
 8003d94:	6014      	str	r4, [r2, #0]
 8003d96:	4628      	mov	r0, r5
 8003d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d9c:	f000 b8e4 	b.w	8003f68 <__malloc_unlock>
 8003da0:	42a3      	cmp	r3, r4
 8003da2:	d908      	bls.n	8003db6 <_free_r+0x42>
 8003da4:	6820      	ldr	r0, [r4, #0]
 8003da6:	1821      	adds	r1, r4, r0
 8003da8:	428b      	cmp	r3, r1
 8003daa:	bf01      	itttt	eq
 8003dac:	6819      	ldreq	r1, [r3, #0]
 8003dae:	685b      	ldreq	r3, [r3, #4]
 8003db0:	1809      	addeq	r1, r1, r0
 8003db2:	6021      	streq	r1, [r4, #0]
 8003db4:	e7ed      	b.n	8003d92 <_free_r+0x1e>
 8003db6:	461a      	mov	r2, r3
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	b10b      	cbz	r3, 8003dc0 <_free_r+0x4c>
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	d9fa      	bls.n	8003db6 <_free_r+0x42>
 8003dc0:	6811      	ldr	r1, [r2, #0]
 8003dc2:	1850      	adds	r0, r2, r1
 8003dc4:	42a0      	cmp	r0, r4
 8003dc6:	d10b      	bne.n	8003de0 <_free_r+0x6c>
 8003dc8:	6820      	ldr	r0, [r4, #0]
 8003dca:	4401      	add	r1, r0
 8003dcc:	1850      	adds	r0, r2, r1
 8003dce:	4283      	cmp	r3, r0
 8003dd0:	6011      	str	r1, [r2, #0]
 8003dd2:	d1e0      	bne.n	8003d96 <_free_r+0x22>
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	6053      	str	r3, [r2, #4]
 8003dda:	4408      	add	r0, r1
 8003ddc:	6010      	str	r0, [r2, #0]
 8003dde:	e7da      	b.n	8003d96 <_free_r+0x22>
 8003de0:	d902      	bls.n	8003de8 <_free_r+0x74>
 8003de2:	230c      	movs	r3, #12
 8003de4:	602b      	str	r3, [r5, #0]
 8003de6:	e7d6      	b.n	8003d96 <_free_r+0x22>
 8003de8:	6820      	ldr	r0, [r4, #0]
 8003dea:	1821      	adds	r1, r4, r0
 8003dec:	428b      	cmp	r3, r1
 8003dee:	bf04      	itt	eq
 8003df0:	6819      	ldreq	r1, [r3, #0]
 8003df2:	685b      	ldreq	r3, [r3, #4]
 8003df4:	6063      	str	r3, [r4, #4]
 8003df6:	bf04      	itt	eq
 8003df8:	1809      	addeq	r1, r1, r0
 8003dfa:	6021      	streq	r1, [r4, #0]
 8003dfc:	6054      	str	r4, [r2, #4]
 8003dfe:	e7ca      	b.n	8003d96 <_free_r+0x22>
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
 8003e02:	bf00      	nop
 8003e04:	200002b0 	.word	0x200002b0

08003e08 <malloc>:
 8003e08:	4b02      	ldr	r3, [pc, #8]	@ (8003e14 <malloc+0xc>)
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	f000 b825 	b.w	8003e5c <_malloc_r>
 8003e12:	bf00      	nop
 8003e14:	20000018 	.word	0x20000018

08003e18 <sbrk_aligned>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	4e0f      	ldr	r6, [pc, #60]	@ (8003e58 <sbrk_aligned+0x40>)
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	6831      	ldr	r1, [r6, #0]
 8003e20:	4605      	mov	r5, r0
 8003e22:	b911      	cbnz	r1, 8003e2a <sbrk_aligned+0x12>
 8003e24:	f000 f964 	bl	80040f0 <_sbrk_r>
 8003e28:	6030      	str	r0, [r6, #0]
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f000 f95f 	bl	80040f0 <_sbrk_r>
 8003e32:	1c43      	adds	r3, r0, #1
 8003e34:	d103      	bne.n	8003e3e <sbrk_aligned+0x26>
 8003e36:	f04f 34ff 	mov.w	r4, #4294967295
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	bd70      	pop	{r4, r5, r6, pc}
 8003e3e:	1cc4      	adds	r4, r0, #3
 8003e40:	f024 0403 	bic.w	r4, r4, #3
 8003e44:	42a0      	cmp	r0, r4
 8003e46:	d0f8      	beq.n	8003e3a <sbrk_aligned+0x22>
 8003e48:	1a21      	subs	r1, r4, r0
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f000 f950 	bl	80040f0 <_sbrk_r>
 8003e50:	3001      	adds	r0, #1
 8003e52:	d1f2      	bne.n	8003e3a <sbrk_aligned+0x22>
 8003e54:	e7ef      	b.n	8003e36 <sbrk_aligned+0x1e>
 8003e56:	bf00      	nop
 8003e58:	200002ac 	.word	0x200002ac

08003e5c <_malloc_r>:
 8003e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e60:	1ccd      	adds	r5, r1, #3
 8003e62:	f025 0503 	bic.w	r5, r5, #3
 8003e66:	3508      	adds	r5, #8
 8003e68:	2d0c      	cmp	r5, #12
 8003e6a:	bf38      	it	cc
 8003e6c:	250c      	movcc	r5, #12
 8003e6e:	2d00      	cmp	r5, #0
 8003e70:	4606      	mov	r6, r0
 8003e72:	db01      	blt.n	8003e78 <_malloc_r+0x1c>
 8003e74:	42a9      	cmp	r1, r5
 8003e76:	d904      	bls.n	8003e82 <_malloc_r+0x26>
 8003e78:	230c      	movs	r3, #12
 8003e7a:	6033      	str	r3, [r6, #0]
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f58 <_malloc_r+0xfc>
 8003e86:	f000 f869 	bl	8003f5c <__malloc_lock>
 8003e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e8e:	461c      	mov	r4, r3
 8003e90:	bb44      	cbnz	r4, 8003ee4 <_malloc_r+0x88>
 8003e92:	4629      	mov	r1, r5
 8003e94:	4630      	mov	r0, r6
 8003e96:	f7ff ffbf 	bl	8003e18 <sbrk_aligned>
 8003e9a:	1c43      	adds	r3, r0, #1
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	d158      	bne.n	8003f52 <_malloc_r+0xf6>
 8003ea0:	f8d8 4000 	ldr.w	r4, [r8]
 8003ea4:	4627      	mov	r7, r4
 8003ea6:	2f00      	cmp	r7, #0
 8003ea8:	d143      	bne.n	8003f32 <_malloc_r+0xd6>
 8003eaa:	2c00      	cmp	r4, #0
 8003eac:	d04b      	beq.n	8003f46 <_malloc_r+0xea>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	4639      	mov	r1, r7
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	eb04 0903 	add.w	r9, r4, r3
 8003eb8:	f000 f91a 	bl	80040f0 <_sbrk_r>
 8003ebc:	4581      	cmp	r9, r0
 8003ebe:	d142      	bne.n	8003f46 <_malloc_r+0xea>
 8003ec0:	6821      	ldr	r1, [r4, #0]
 8003ec2:	1a6d      	subs	r5, r5, r1
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f7ff ffa6 	bl	8003e18 <sbrk_aligned>
 8003ecc:	3001      	adds	r0, #1
 8003ece:	d03a      	beq.n	8003f46 <_malloc_r+0xea>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	442b      	add	r3, r5
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	bb62      	cbnz	r2, 8003f38 <_malloc_r+0xdc>
 8003ede:	f8c8 7000 	str.w	r7, [r8]
 8003ee2:	e00f      	b.n	8003f04 <_malloc_r+0xa8>
 8003ee4:	6822      	ldr	r2, [r4, #0]
 8003ee6:	1b52      	subs	r2, r2, r5
 8003ee8:	d420      	bmi.n	8003f2c <_malloc_r+0xd0>
 8003eea:	2a0b      	cmp	r2, #11
 8003eec:	d917      	bls.n	8003f1e <_malloc_r+0xc2>
 8003eee:	1961      	adds	r1, r4, r5
 8003ef0:	42a3      	cmp	r3, r4
 8003ef2:	6025      	str	r5, [r4, #0]
 8003ef4:	bf18      	it	ne
 8003ef6:	6059      	strne	r1, [r3, #4]
 8003ef8:	6863      	ldr	r3, [r4, #4]
 8003efa:	bf08      	it	eq
 8003efc:	f8c8 1000 	streq.w	r1, [r8]
 8003f00:	5162      	str	r2, [r4, r5]
 8003f02:	604b      	str	r3, [r1, #4]
 8003f04:	4630      	mov	r0, r6
 8003f06:	f000 f82f 	bl	8003f68 <__malloc_unlock>
 8003f0a:	f104 000b 	add.w	r0, r4, #11
 8003f0e:	1d23      	adds	r3, r4, #4
 8003f10:	f020 0007 	bic.w	r0, r0, #7
 8003f14:	1ac2      	subs	r2, r0, r3
 8003f16:	bf1c      	itt	ne
 8003f18:	1a1b      	subne	r3, r3, r0
 8003f1a:	50a3      	strne	r3, [r4, r2]
 8003f1c:	e7af      	b.n	8003e7e <_malloc_r+0x22>
 8003f1e:	6862      	ldr	r2, [r4, #4]
 8003f20:	42a3      	cmp	r3, r4
 8003f22:	bf0c      	ite	eq
 8003f24:	f8c8 2000 	streq.w	r2, [r8]
 8003f28:	605a      	strne	r2, [r3, #4]
 8003f2a:	e7eb      	b.n	8003f04 <_malloc_r+0xa8>
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	6864      	ldr	r4, [r4, #4]
 8003f30:	e7ae      	b.n	8003e90 <_malloc_r+0x34>
 8003f32:	463c      	mov	r4, r7
 8003f34:	687f      	ldr	r7, [r7, #4]
 8003f36:	e7b6      	b.n	8003ea6 <_malloc_r+0x4a>
 8003f38:	461a      	mov	r2, r3
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	42a3      	cmp	r3, r4
 8003f3e:	d1fb      	bne.n	8003f38 <_malloc_r+0xdc>
 8003f40:	2300      	movs	r3, #0
 8003f42:	6053      	str	r3, [r2, #4]
 8003f44:	e7de      	b.n	8003f04 <_malloc_r+0xa8>
 8003f46:	230c      	movs	r3, #12
 8003f48:	6033      	str	r3, [r6, #0]
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	f000 f80c 	bl	8003f68 <__malloc_unlock>
 8003f50:	e794      	b.n	8003e7c <_malloc_r+0x20>
 8003f52:	6005      	str	r5, [r0, #0]
 8003f54:	e7d6      	b.n	8003f04 <_malloc_r+0xa8>
 8003f56:	bf00      	nop
 8003f58:	200002b0 	.word	0x200002b0

08003f5c <__malloc_lock>:
 8003f5c:	4801      	ldr	r0, [pc, #4]	@ (8003f64 <__malloc_lock+0x8>)
 8003f5e:	f7ff bee8 	b.w	8003d32 <__retarget_lock_acquire_recursive>
 8003f62:	bf00      	nop
 8003f64:	200002a8 	.word	0x200002a8

08003f68 <__malloc_unlock>:
 8003f68:	4801      	ldr	r0, [pc, #4]	@ (8003f70 <__malloc_unlock+0x8>)
 8003f6a:	f7ff bee3 	b.w	8003d34 <__retarget_lock_release_recursive>
 8003f6e:	bf00      	nop
 8003f70:	200002a8 	.word	0x200002a8

08003f74 <__sflush_r>:
 8003f74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7c:	0716      	lsls	r6, r2, #28
 8003f7e:	4605      	mov	r5, r0
 8003f80:	460c      	mov	r4, r1
 8003f82:	d454      	bmi.n	800402e <__sflush_r+0xba>
 8003f84:	684b      	ldr	r3, [r1, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	dc02      	bgt.n	8003f90 <__sflush_r+0x1c>
 8003f8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	dd48      	ble.n	8004022 <__sflush_r+0xae>
 8003f90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f92:	2e00      	cmp	r6, #0
 8003f94:	d045      	beq.n	8004022 <__sflush_r+0xae>
 8003f96:	2300      	movs	r3, #0
 8003f98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003f9c:	682f      	ldr	r7, [r5, #0]
 8003f9e:	6a21      	ldr	r1, [r4, #32]
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	d030      	beq.n	8004006 <__sflush_r+0x92>
 8003fa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	0759      	lsls	r1, r3, #29
 8003faa:	d505      	bpl.n	8003fb8 <__sflush_r+0x44>
 8003fac:	6863      	ldr	r3, [r4, #4]
 8003fae:	1ad2      	subs	r2, r2, r3
 8003fb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003fb2:	b10b      	cbz	r3, 8003fb8 <__sflush_r+0x44>
 8003fb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003fb6:	1ad2      	subs	r2, r2, r3
 8003fb8:	2300      	movs	r3, #0
 8003fba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003fbc:	6a21      	ldr	r1, [r4, #32]
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	47b0      	blx	r6
 8003fc2:	1c43      	adds	r3, r0, #1
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	d106      	bne.n	8003fd6 <__sflush_r+0x62>
 8003fc8:	6829      	ldr	r1, [r5, #0]
 8003fca:	291d      	cmp	r1, #29
 8003fcc:	d82b      	bhi.n	8004026 <__sflush_r+0xb2>
 8003fce:	4a2a      	ldr	r2, [pc, #168]	@ (8004078 <__sflush_r+0x104>)
 8003fd0:	410a      	asrs	r2, r1
 8003fd2:	07d6      	lsls	r6, r2, #31
 8003fd4:	d427      	bmi.n	8004026 <__sflush_r+0xb2>
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	6062      	str	r2, [r4, #4]
 8003fda:	04d9      	lsls	r1, r3, #19
 8003fdc:	6922      	ldr	r2, [r4, #16]
 8003fde:	6022      	str	r2, [r4, #0]
 8003fe0:	d504      	bpl.n	8003fec <__sflush_r+0x78>
 8003fe2:	1c42      	adds	r2, r0, #1
 8003fe4:	d101      	bne.n	8003fea <__sflush_r+0x76>
 8003fe6:	682b      	ldr	r3, [r5, #0]
 8003fe8:	b903      	cbnz	r3, 8003fec <__sflush_r+0x78>
 8003fea:	6560      	str	r0, [r4, #84]	@ 0x54
 8003fec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fee:	602f      	str	r7, [r5, #0]
 8003ff0:	b1b9      	cbz	r1, 8004022 <__sflush_r+0xae>
 8003ff2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ff6:	4299      	cmp	r1, r3
 8003ff8:	d002      	beq.n	8004000 <__sflush_r+0x8c>
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f7ff feba 	bl	8003d74 <_free_r>
 8004000:	2300      	movs	r3, #0
 8004002:	6363      	str	r3, [r4, #52]	@ 0x34
 8004004:	e00d      	b.n	8004022 <__sflush_r+0xae>
 8004006:	2301      	movs	r3, #1
 8004008:	4628      	mov	r0, r5
 800400a:	47b0      	blx	r6
 800400c:	4602      	mov	r2, r0
 800400e:	1c50      	adds	r0, r2, #1
 8004010:	d1c9      	bne.n	8003fa6 <__sflush_r+0x32>
 8004012:	682b      	ldr	r3, [r5, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0c6      	beq.n	8003fa6 <__sflush_r+0x32>
 8004018:	2b1d      	cmp	r3, #29
 800401a:	d001      	beq.n	8004020 <__sflush_r+0xac>
 800401c:	2b16      	cmp	r3, #22
 800401e:	d11e      	bne.n	800405e <__sflush_r+0xea>
 8004020:	602f      	str	r7, [r5, #0]
 8004022:	2000      	movs	r0, #0
 8004024:	e022      	b.n	800406c <__sflush_r+0xf8>
 8004026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800402a:	b21b      	sxth	r3, r3
 800402c:	e01b      	b.n	8004066 <__sflush_r+0xf2>
 800402e:	690f      	ldr	r7, [r1, #16]
 8004030:	2f00      	cmp	r7, #0
 8004032:	d0f6      	beq.n	8004022 <__sflush_r+0xae>
 8004034:	0793      	lsls	r3, r2, #30
 8004036:	680e      	ldr	r6, [r1, #0]
 8004038:	bf08      	it	eq
 800403a:	694b      	ldreq	r3, [r1, #20]
 800403c:	600f      	str	r7, [r1, #0]
 800403e:	bf18      	it	ne
 8004040:	2300      	movne	r3, #0
 8004042:	eba6 0807 	sub.w	r8, r6, r7
 8004046:	608b      	str	r3, [r1, #8]
 8004048:	f1b8 0f00 	cmp.w	r8, #0
 800404c:	dde9      	ble.n	8004022 <__sflush_r+0xae>
 800404e:	6a21      	ldr	r1, [r4, #32]
 8004050:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004052:	4643      	mov	r3, r8
 8004054:	463a      	mov	r2, r7
 8004056:	4628      	mov	r0, r5
 8004058:	47b0      	blx	r6
 800405a:	2800      	cmp	r0, #0
 800405c:	dc08      	bgt.n	8004070 <__sflush_r+0xfc>
 800405e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004066:	81a3      	strh	r3, [r4, #12]
 8004068:	f04f 30ff 	mov.w	r0, #4294967295
 800406c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004070:	4407      	add	r7, r0
 8004072:	eba8 0800 	sub.w	r8, r8, r0
 8004076:	e7e7      	b.n	8004048 <__sflush_r+0xd4>
 8004078:	dfbffffe 	.word	0xdfbffffe

0800407c <_fflush_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	690b      	ldr	r3, [r1, #16]
 8004080:	4605      	mov	r5, r0
 8004082:	460c      	mov	r4, r1
 8004084:	b913      	cbnz	r3, 800408c <_fflush_r+0x10>
 8004086:	2500      	movs	r5, #0
 8004088:	4628      	mov	r0, r5
 800408a:	bd38      	pop	{r3, r4, r5, pc}
 800408c:	b118      	cbz	r0, 8004096 <_fflush_r+0x1a>
 800408e:	6a03      	ldr	r3, [r0, #32]
 8004090:	b90b      	cbnz	r3, 8004096 <_fflush_r+0x1a>
 8004092:	f7ff fd5b 	bl	8003b4c <__sinit>
 8004096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f3      	beq.n	8004086 <_fflush_r+0xa>
 800409e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80040a0:	07d0      	lsls	r0, r2, #31
 80040a2:	d404      	bmi.n	80040ae <_fflush_r+0x32>
 80040a4:	0599      	lsls	r1, r3, #22
 80040a6:	d402      	bmi.n	80040ae <_fflush_r+0x32>
 80040a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040aa:	f7ff fe42 	bl	8003d32 <__retarget_lock_acquire_recursive>
 80040ae:	4628      	mov	r0, r5
 80040b0:	4621      	mov	r1, r4
 80040b2:	f7ff ff5f 	bl	8003f74 <__sflush_r>
 80040b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040b8:	07da      	lsls	r2, r3, #31
 80040ba:	4605      	mov	r5, r0
 80040bc:	d4e4      	bmi.n	8004088 <_fflush_r+0xc>
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	059b      	lsls	r3, r3, #22
 80040c2:	d4e1      	bmi.n	8004088 <_fflush_r+0xc>
 80040c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040c6:	f7ff fe35 	bl	8003d34 <__retarget_lock_release_recursive>
 80040ca:	e7dd      	b.n	8004088 <_fflush_r+0xc>

080040cc <fiprintf>:
 80040cc:	b40e      	push	{r1, r2, r3}
 80040ce:	b503      	push	{r0, r1, lr}
 80040d0:	4601      	mov	r1, r0
 80040d2:	ab03      	add	r3, sp, #12
 80040d4:	4805      	ldr	r0, [pc, #20]	@ (80040ec <fiprintf+0x20>)
 80040d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80040da:	6800      	ldr	r0, [r0, #0]
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	f000 f847 	bl	8004170 <_vfiprintf_r>
 80040e2:	b002      	add	sp, #8
 80040e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040e8:	b003      	add	sp, #12
 80040ea:	4770      	bx	lr
 80040ec:	20000018 	.word	0x20000018

080040f0 <_sbrk_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	4d06      	ldr	r5, [pc, #24]	@ (800410c <_sbrk_r+0x1c>)
 80040f4:	2300      	movs	r3, #0
 80040f6:	4604      	mov	r4, r0
 80040f8:	4608      	mov	r0, r1
 80040fa:	602b      	str	r3, [r5, #0]
 80040fc:	f7fc ff6a 	bl	8000fd4 <_sbrk>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d102      	bne.n	800410a <_sbrk_r+0x1a>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	b103      	cbz	r3, 800410a <_sbrk_r+0x1a>
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	bd38      	pop	{r3, r4, r5, pc}
 800410c:	200002a4 	.word	0x200002a4

08004110 <abort>:
 8004110:	b508      	push	{r3, lr}
 8004112:	2006      	movs	r0, #6
 8004114:	f000 fb8e 	bl	8004834 <raise>
 8004118:	2001      	movs	r0, #1
 800411a:	f7fc fee2 	bl	8000ee2 <_exit>

0800411e <__sfputc_r>:
 800411e:	6893      	ldr	r3, [r2, #8]
 8004120:	3b01      	subs	r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	b410      	push	{r4}
 8004126:	6093      	str	r3, [r2, #8]
 8004128:	da08      	bge.n	800413c <__sfputc_r+0x1e>
 800412a:	6994      	ldr	r4, [r2, #24]
 800412c:	42a3      	cmp	r3, r4
 800412e:	db01      	blt.n	8004134 <__sfputc_r+0x16>
 8004130:	290a      	cmp	r1, #10
 8004132:	d103      	bne.n	800413c <__sfputc_r+0x1e>
 8004134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004138:	f000 bac0 	b.w	80046bc <__swbuf_r>
 800413c:	6813      	ldr	r3, [r2, #0]
 800413e:	1c58      	adds	r0, r3, #1
 8004140:	6010      	str	r0, [r2, #0]
 8004142:	7019      	strb	r1, [r3, #0]
 8004144:	4608      	mov	r0, r1
 8004146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800414a:	4770      	bx	lr

0800414c <__sfputs_r>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	4606      	mov	r6, r0
 8004150:	460f      	mov	r7, r1
 8004152:	4614      	mov	r4, r2
 8004154:	18d5      	adds	r5, r2, r3
 8004156:	42ac      	cmp	r4, r5
 8004158:	d101      	bne.n	800415e <__sfputs_r+0x12>
 800415a:	2000      	movs	r0, #0
 800415c:	e007      	b.n	800416e <__sfputs_r+0x22>
 800415e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004162:	463a      	mov	r2, r7
 8004164:	4630      	mov	r0, r6
 8004166:	f7ff ffda 	bl	800411e <__sfputc_r>
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	d1f3      	bne.n	8004156 <__sfputs_r+0xa>
 800416e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004170 <_vfiprintf_r>:
 8004170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004174:	460d      	mov	r5, r1
 8004176:	b09d      	sub	sp, #116	@ 0x74
 8004178:	4614      	mov	r4, r2
 800417a:	4698      	mov	r8, r3
 800417c:	4606      	mov	r6, r0
 800417e:	b118      	cbz	r0, 8004188 <_vfiprintf_r+0x18>
 8004180:	6a03      	ldr	r3, [r0, #32]
 8004182:	b90b      	cbnz	r3, 8004188 <_vfiprintf_r+0x18>
 8004184:	f7ff fce2 	bl	8003b4c <__sinit>
 8004188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800418a:	07d9      	lsls	r1, r3, #31
 800418c:	d405      	bmi.n	800419a <_vfiprintf_r+0x2a>
 800418e:	89ab      	ldrh	r3, [r5, #12]
 8004190:	059a      	lsls	r2, r3, #22
 8004192:	d402      	bmi.n	800419a <_vfiprintf_r+0x2a>
 8004194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004196:	f7ff fdcc 	bl	8003d32 <__retarget_lock_acquire_recursive>
 800419a:	89ab      	ldrh	r3, [r5, #12]
 800419c:	071b      	lsls	r3, r3, #28
 800419e:	d501      	bpl.n	80041a4 <_vfiprintf_r+0x34>
 80041a0:	692b      	ldr	r3, [r5, #16]
 80041a2:	b99b      	cbnz	r3, 80041cc <_vfiprintf_r+0x5c>
 80041a4:	4629      	mov	r1, r5
 80041a6:	4630      	mov	r0, r6
 80041a8:	f000 fac6 	bl	8004738 <__swsetup_r>
 80041ac:	b170      	cbz	r0, 80041cc <_vfiprintf_r+0x5c>
 80041ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041b0:	07dc      	lsls	r4, r3, #31
 80041b2:	d504      	bpl.n	80041be <_vfiprintf_r+0x4e>
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	b01d      	add	sp, #116	@ 0x74
 80041ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041be:	89ab      	ldrh	r3, [r5, #12]
 80041c0:	0598      	lsls	r0, r3, #22
 80041c2:	d4f7      	bmi.n	80041b4 <_vfiprintf_r+0x44>
 80041c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041c6:	f7ff fdb5 	bl	8003d34 <__retarget_lock_release_recursive>
 80041ca:	e7f3      	b.n	80041b4 <_vfiprintf_r+0x44>
 80041cc:	2300      	movs	r3, #0
 80041ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80041d0:	2320      	movs	r3, #32
 80041d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80041da:	2330      	movs	r3, #48	@ 0x30
 80041dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800438c <_vfiprintf_r+0x21c>
 80041e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041e4:	f04f 0901 	mov.w	r9, #1
 80041e8:	4623      	mov	r3, r4
 80041ea:	469a      	mov	sl, r3
 80041ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041f0:	b10a      	cbz	r2, 80041f6 <_vfiprintf_r+0x86>
 80041f2:	2a25      	cmp	r2, #37	@ 0x25
 80041f4:	d1f9      	bne.n	80041ea <_vfiprintf_r+0x7a>
 80041f6:	ebba 0b04 	subs.w	fp, sl, r4
 80041fa:	d00b      	beq.n	8004214 <_vfiprintf_r+0xa4>
 80041fc:	465b      	mov	r3, fp
 80041fe:	4622      	mov	r2, r4
 8004200:	4629      	mov	r1, r5
 8004202:	4630      	mov	r0, r6
 8004204:	f7ff ffa2 	bl	800414c <__sfputs_r>
 8004208:	3001      	adds	r0, #1
 800420a:	f000 80a7 	beq.w	800435c <_vfiprintf_r+0x1ec>
 800420e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004210:	445a      	add	r2, fp
 8004212:	9209      	str	r2, [sp, #36]	@ 0x24
 8004214:	f89a 3000 	ldrb.w	r3, [sl]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 809f 	beq.w	800435c <_vfiprintf_r+0x1ec>
 800421e:	2300      	movs	r3, #0
 8004220:	f04f 32ff 	mov.w	r2, #4294967295
 8004224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004228:	f10a 0a01 	add.w	sl, sl, #1
 800422c:	9304      	str	r3, [sp, #16]
 800422e:	9307      	str	r3, [sp, #28]
 8004230:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004234:	931a      	str	r3, [sp, #104]	@ 0x68
 8004236:	4654      	mov	r4, sl
 8004238:	2205      	movs	r2, #5
 800423a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800423e:	4853      	ldr	r0, [pc, #332]	@ (800438c <_vfiprintf_r+0x21c>)
 8004240:	f7fb ffce 	bl	80001e0 <memchr>
 8004244:	9a04      	ldr	r2, [sp, #16]
 8004246:	b9d8      	cbnz	r0, 8004280 <_vfiprintf_r+0x110>
 8004248:	06d1      	lsls	r1, r2, #27
 800424a:	bf44      	itt	mi
 800424c:	2320      	movmi	r3, #32
 800424e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004252:	0713      	lsls	r3, r2, #28
 8004254:	bf44      	itt	mi
 8004256:	232b      	movmi	r3, #43	@ 0x2b
 8004258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800425c:	f89a 3000 	ldrb.w	r3, [sl]
 8004260:	2b2a      	cmp	r3, #42	@ 0x2a
 8004262:	d015      	beq.n	8004290 <_vfiprintf_r+0x120>
 8004264:	9a07      	ldr	r2, [sp, #28]
 8004266:	4654      	mov	r4, sl
 8004268:	2000      	movs	r0, #0
 800426a:	f04f 0c0a 	mov.w	ip, #10
 800426e:	4621      	mov	r1, r4
 8004270:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004274:	3b30      	subs	r3, #48	@ 0x30
 8004276:	2b09      	cmp	r3, #9
 8004278:	d94b      	bls.n	8004312 <_vfiprintf_r+0x1a2>
 800427a:	b1b0      	cbz	r0, 80042aa <_vfiprintf_r+0x13a>
 800427c:	9207      	str	r2, [sp, #28]
 800427e:	e014      	b.n	80042aa <_vfiprintf_r+0x13a>
 8004280:	eba0 0308 	sub.w	r3, r0, r8
 8004284:	fa09 f303 	lsl.w	r3, r9, r3
 8004288:	4313      	orrs	r3, r2
 800428a:	9304      	str	r3, [sp, #16]
 800428c:	46a2      	mov	sl, r4
 800428e:	e7d2      	b.n	8004236 <_vfiprintf_r+0xc6>
 8004290:	9b03      	ldr	r3, [sp, #12]
 8004292:	1d19      	adds	r1, r3, #4
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	9103      	str	r1, [sp, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	bfbb      	ittet	lt
 800429c:	425b      	neglt	r3, r3
 800429e:	f042 0202 	orrlt.w	r2, r2, #2
 80042a2:	9307      	strge	r3, [sp, #28]
 80042a4:	9307      	strlt	r3, [sp, #28]
 80042a6:	bfb8      	it	lt
 80042a8:	9204      	strlt	r2, [sp, #16]
 80042aa:	7823      	ldrb	r3, [r4, #0]
 80042ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80042ae:	d10a      	bne.n	80042c6 <_vfiprintf_r+0x156>
 80042b0:	7863      	ldrb	r3, [r4, #1]
 80042b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80042b4:	d132      	bne.n	800431c <_vfiprintf_r+0x1ac>
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	1d1a      	adds	r2, r3, #4
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	9203      	str	r2, [sp, #12]
 80042be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042c2:	3402      	adds	r4, #2
 80042c4:	9305      	str	r3, [sp, #20]
 80042c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800439c <_vfiprintf_r+0x22c>
 80042ca:	7821      	ldrb	r1, [r4, #0]
 80042cc:	2203      	movs	r2, #3
 80042ce:	4650      	mov	r0, sl
 80042d0:	f7fb ff86 	bl	80001e0 <memchr>
 80042d4:	b138      	cbz	r0, 80042e6 <_vfiprintf_r+0x176>
 80042d6:	9b04      	ldr	r3, [sp, #16]
 80042d8:	eba0 000a 	sub.w	r0, r0, sl
 80042dc:	2240      	movs	r2, #64	@ 0x40
 80042de:	4082      	lsls	r2, r0
 80042e0:	4313      	orrs	r3, r2
 80042e2:	3401      	adds	r4, #1
 80042e4:	9304      	str	r3, [sp, #16]
 80042e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042ea:	4829      	ldr	r0, [pc, #164]	@ (8004390 <_vfiprintf_r+0x220>)
 80042ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042f0:	2206      	movs	r2, #6
 80042f2:	f7fb ff75 	bl	80001e0 <memchr>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d03f      	beq.n	800437a <_vfiprintf_r+0x20a>
 80042fa:	4b26      	ldr	r3, [pc, #152]	@ (8004394 <_vfiprintf_r+0x224>)
 80042fc:	bb1b      	cbnz	r3, 8004346 <_vfiprintf_r+0x1d6>
 80042fe:	9b03      	ldr	r3, [sp, #12]
 8004300:	3307      	adds	r3, #7
 8004302:	f023 0307 	bic.w	r3, r3, #7
 8004306:	3308      	adds	r3, #8
 8004308:	9303      	str	r3, [sp, #12]
 800430a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800430c:	443b      	add	r3, r7
 800430e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004310:	e76a      	b.n	80041e8 <_vfiprintf_r+0x78>
 8004312:	fb0c 3202 	mla	r2, ip, r2, r3
 8004316:	460c      	mov	r4, r1
 8004318:	2001      	movs	r0, #1
 800431a:	e7a8      	b.n	800426e <_vfiprintf_r+0xfe>
 800431c:	2300      	movs	r3, #0
 800431e:	3401      	adds	r4, #1
 8004320:	9305      	str	r3, [sp, #20]
 8004322:	4619      	mov	r1, r3
 8004324:	f04f 0c0a 	mov.w	ip, #10
 8004328:	4620      	mov	r0, r4
 800432a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800432e:	3a30      	subs	r2, #48	@ 0x30
 8004330:	2a09      	cmp	r2, #9
 8004332:	d903      	bls.n	800433c <_vfiprintf_r+0x1cc>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0c6      	beq.n	80042c6 <_vfiprintf_r+0x156>
 8004338:	9105      	str	r1, [sp, #20]
 800433a:	e7c4      	b.n	80042c6 <_vfiprintf_r+0x156>
 800433c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004340:	4604      	mov	r4, r0
 8004342:	2301      	movs	r3, #1
 8004344:	e7f0      	b.n	8004328 <_vfiprintf_r+0x1b8>
 8004346:	ab03      	add	r3, sp, #12
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	462a      	mov	r2, r5
 800434c:	4b12      	ldr	r3, [pc, #72]	@ (8004398 <_vfiprintf_r+0x228>)
 800434e:	a904      	add	r1, sp, #16
 8004350:	4630      	mov	r0, r6
 8004352:	f3af 8000 	nop.w
 8004356:	4607      	mov	r7, r0
 8004358:	1c78      	adds	r0, r7, #1
 800435a:	d1d6      	bne.n	800430a <_vfiprintf_r+0x19a>
 800435c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800435e:	07d9      	lsls	r1, r3, #31
 8004360:	d405      	bmi.n	800436e <_vfiprintf_r+0x1fe>
 8004362:	89ab      	ldrh	r3, [r5, #12]
 8004364:	059a      	lsls	r2, r3, #22
 8004366:	d402      	bmi.n	800436e <_vfiprintf_r+0x1fe>
 8004368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800436a:	f7ff fce3 	bl	8003d34 <__retarget_lock_release_recursive>
 800436e:	89ab      	ldrh	r3, [r5, #12]
 8004370:	065b      	lsls	r3, r3, #25
 8004372:	f53f af1f 	bmi.w	80041b4 <_vfiprintf_r+0x44>
 8004376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004378:	e71e      	b.n	80041b8 <_vfiprintf_r+0x48>
 800437a:	ab03      	add	r3, sp, #12
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	462a      	mov	r2, r5
 8004380:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <_vfiprintf_r+0x228>)
 8004382:	a904      	add	r1, sp, #16
 8004384:	4630      	mov	r0, r6
 8004386:	f000 f879 	bl	800447c <_printf_i>
 800438a:	e7e4      	b.n	8004356 <_vfiprintf_r+0x1e6>
 800438c:	08004a4f 	.word	0x08004a4f
 8004390:	08004a59 	.word	0x08004a59
 8004394:	00000000 	.word	0x00000000
 8004398:	0800414d 	.word	0x0800414d
 800439c:	08004a55 	.word	0x08004a55

080043a0 <_printf_common>:
 80043a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a4:	4616      	mov	r6, r2
 80043a6:	4698      	mov	r8, r3
 80043a8:	688a      	ldr	r2, [r1, #8]
 80043aa:	690b      	ldr	r3, [r1, #16]
 80043ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bfb8      	it	lt
 80043b4:	4613      	movlt	r3, r2
 80043b6:	6033      	str	r3, [r6, #0]
 80043b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043bc:	4607      	mov	r7, r0
 80043be:	460c      	mov	r4, r1
 80043c0:	b10a      	cbz	r2, 80043c6 <_printf_common+0x26>
 80043c2:	3301      	adds	r3, #1
 80043c4:	6033      	str	r3, [r6, #0]
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	0699      	lsls	r1, r3, #26
 80043ca:	bf42      	ittt	mi
 80043cc:	6833      	ldrmi	r3, [r6, #0]
 80043ce:	3302      	addmi	r3, #2
 80043d0:	6033      	strmi	r3, [r6, #0]
 80043d2:	6825      	ldr	r5, [r4, #0]
 80043d4:	f015 0506 	ands.w	r5, r5, #6
 80043d8:	d106      	bne.n	80043e8 <_printf_common+0x48>
 80043da:	f104 0a19 	add.w	sl, r4, #25
 80043de:	68e3      	ldr	r3, [r4, #12]
 80043e0:	6832      	ldr	r2, [r6, #0]
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	42ab      	cmp	r3, r5
 80043e6:	dc26      	bgt.n	8004436 <_printf_common+0x96>
 80043e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043ec:	6822      	ldr	r2, [r4, #0]
 80043ee:	3b00      	subs	r3, #0
 80043f0:	bf18      	it	ne
 80043f2:	2301      	movne	r3, #1
 80043f4:	0692      	lsls	r2, r2, #26
 80043f6:	d42b      	bmi.n	8004450 <_printf_common+0xb0>
 80043f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043fc:	4641      	mov	r1, r8
 80043fe:	4638      	mov	r0, r7
 8004400:	47c8      	blx	r9
 8004402:	3001      	adds	r0, #1
 8004404:	d01e      	beq.n	8004444 <_printf_common+0xa4>
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	6922      	ldr	r2, [r4, #16]
 800440a:	f003 0306 	and.w	r3, r3, #6
 800440e:	2b04      	cmp	r3, #4
 8004410:	bf02      	ittt	eq
 8004412:	68e5      	ldreq	r5, [r4, #12]
 8004414:	6833      	ldreq	r3, [r6, #0]
 8004416:	1aed      	subeq	r5, r5, r3
 8004418:	68a3      	ldr	r3, [r4, #8]
 800441a:	bf0c      	ite	eq
 800441c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004420:	2500      	movne	r5, #0
 8004422:	4293      	cmp	r3, r2
 8004424:	bfc4      	itt	gt
 8004426:	1a9b      	subgt	r3, r3, r2
 8004428:	18ed      	addgt	r5, r5, r3
 800442a:	2600      	movs	r6, #0
 800442c:	341a      	adds	r4, #26
 800442e:	42b5      	cmp	r5, r6
 8004430:	d11a      	bne.n	8004468 <_printf_common+0xc8>
 8004432:	2000      	movs	r0, #0
 8004434:	e008      	b.n	8004448 <_printf_common+0xa8>
 8004436:	2301      	movs	r3, #1
 8004438:	4652      	mov	r2, sl
 800443a:	4641      	mov	r1, r8
 800443c:	4638      	mov	r0, r7
 800443e:	47c8      	blx	r9
 8004440:	3001      	adds	r0, #1
 8004442:	d103      	bne.n	800444c <_printf_common+0xac>
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444c:	3501      	adds	r5, #1
 800444e:	e7c6      	b.n	80043de <_printf_common+0x3e>
 8004450:	18e1      	adds	r1, r4, r3
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	2030      	movs	r0, #48	@ 0x30
 8004456:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800445a:	4422      	add	r2, r4
 800445c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004460:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004464:	3302      	adds	r3, #2
 8004466:	e7c7      	b.n	80043f8 <_printf_common+0x58>
 8004468:	2301      	movs	r3, #1
 800446a:	4622      	mov	r2, r4
 800446c:	4641      	mov	r1, r8
 800446e:	4638      	mov	r0, r7
 8004470:	47c8      	blx	r9
 8004472:	3001      	adds	r0, #1
 8004474:	d0e6      	beq.n	8004444 <_printf_common+0xa4>
 8004476:	3601      	adds	r6, #1
 8004478:	e7d9      	b.n	800442e <_printf_common+0x8e>
	...

0800447c <_printf_i>:
 800447c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004480:	7e0f      	ldrb	r7, [r1, #24]
 8004482:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004484:	2f78      	cmp	r7, #120	@ 0x78
 8004486:	4691      	mov	r9, r2
 8004488:	4680      	mov	r8, r0
 800448a:	460c      	mov	r4, r1
 800448c:	469a      	mov	sl, r3
 800448e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004492:	d807      	bhi.n	80044a4 <_printf_i+0x28>
 8004494:	2f62      	cmp	r7, #98	@ 0x62
 8004496:	d80a      	bhi.n	80044ae <_printf_i+0x32>
 8004498:	2f00      	cmp	r7, #0
 800449a:	f000 80d2 	beq.w	8004642 <_printf_i+0x1c6>
 800449e:	2f58      	cmp	r7, #88	@ 0x58
 80044a0:	f000 80b9 	beq.w	8004616 <_printf_i+0x19a>
 80044a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044ac:	e03a      	b.n	8004524 <_printf_i+0xa8>
 80044ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044b2:	2b15      	cmp	r3, #21
 80044b4:	d8f6      	bhi.n	80044a4 <_printf_i+0x28>
 80044b6:	a101      	add	r1, pc, #4	@ (adr r1, 80044bc <_printf_i+0x40>)
 80044b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044bc:	08004515 	.word	0x08004515
 80044c0:	08004529 	.word	0x08004529
 80044c4:	080044a5 	.word	0x080044a5
 80044c8:	080044a5 	.word	0x080044a5
 80044cc:	080044a5 	.word	0x080044a5
 80044d0:	080044a5 	.word	0x080044a5
 80044d4:	08004529 	.word	0x08004529
 80044d8:	080044a5 	.word	0x080044a5
 80044dc:	080044a5 	.word	0x080044a5
 80044e0:	080044a5 	.word	0x080044a5
 80044e4:	080044a5 	.word	0x080044a5
 80044e8:	08004629 	.word	0x08004629
 80044ec:	08004553 	.word	0x08004553
 80044f0:	080045e3 	.word	0x080045e3
 80044f4:	080044a5 	.word	0x080044a5
 80044f8:	080044a5 	.word	0x080044a5
 80044fc:	0800464b 	.word	0x0800464b
 8004500:	080044a5 	.word	0x080044a5
 8004504:	08004553 	.word	0x08004553
 8004508:	080044a5 	.word	0x080044a5
 800450c:	080044a5 	.word	0x080044a5
 8004510:	080045eb 	.word	0x080045eb
 8004514:	6833      	ldr	r3, [r6, #0]
 8004516:	1d1a      	adds	r2, r3, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6032      	str	r2, [r6, #0]
 800451c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004520:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004524:	2301      	movs	r3, #1
 8004526:	e09d      	b.n	8004664 <_printf_i+0x1e8>
 8004528:	6833      	ldr	r3, [r6, #0]
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	1d19      	adds	r1, r3, #4
 800452e:	6031      	str	r1, [r6, #0]
 8004530:	0606      	lsls	r6, r0, #24
 8004532:	d501      	bpl.n	8004538 <_printf_i+0xbc>
 8004534:	681d      	ldr	r5, [r3, #0]
 8004536:	e003      	b.n	8004540 <_printf_i+0xc4>
 8004538:	0645      	lsls	r5, r0, #25
 800453a:	d5fb      	bpl.n	8004534 <_printf_i+0xb8>
 800453c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004540:	2d00      	cmp	r5, #0
 8004542:	da03      	bge.n	800454c <_printf_i+0xd0>
 8004544:	232d      	movs	r3, #45	@ 0x2d
 8004546:	426d      	negs	r5, r5
 8004548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800454c:	4859      	ldr	r0, [pc, #356]	@ (80046b4 <_printf_i+0x238>)
 800454e:	230a      	movs	r3, #10
 8004550:	e011      	b.n	8004576 <_printf_i+0xfa>
 8004552:	6821      	ldr	r1, [r4, #0]
 8004554:	6833      	ldr	r3, [r6, #0]
 8004556:	0608      	lsls	r0, r1, #24
 8004558:	f853 5b04 	ldr.w	r5, [r3], #4
 800455c:	d402      	bmi.n	8004564 <_printf_i+0xe8>
 800455e:	0649      	lsls	r1, r1, #25
 8004560:	bf48      	it	mi
 8004562:	b2ad      	uxthmi	r5, r5
 8004564:	2f6f      	cmp	r7, #111	@ 0x6f
 8004566:	4853      	ldr	r0, [pc, #332]	@ (80046b4 <_printf_i+0x238>)
 8004568:	6033      	str	r3, [r6, #0]
 800456a:	bf14      	ite	ne
 800456c:	230a      	movne	r3, #10
 800456e:	2308      	moveq	r3, #8
 8004570:	2100      	movs	r1, #0
 8004572:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004576:	6866      	ldr	r6, [r4, #4]
 8004578:	60a6      	str	r6, [r4, #8]
 800457a:	2e00      	cmp	r6, #0
 800457c:	bfa2      	ittt	ge
 800457e:	6821      	ldrge	r1, [r4, #0]
 8004580:	f021 0104 	bicge.w	r1, r1, #4
 8004584:	6021      	strge	r1, [r4, #0]
 8004586:	b90d      	cbnz	r5, 800458c <_printf_i+0x110>
 8004588:	2e00      	cmp	r6, #0
 800458a:	d04b      	beq.n	8004624 <_printf_i+0x1a8>
 800458c:	4616      	mov	r6, r2
 800458e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004592:	fb03 5711 	mls	r7, r3, r1, r5
 8004596:	5dc7      	ldrb	r7, [r0, r7]
 8004598:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800459c:	462f      	mov	r7, r5
 800459e:	42bb      	cmp	r3, r7
 80045a0:	460d      	mov	r5, r1
 80045a2:	d9f4      	bls.n	800458e <_printf_i+0x112>
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d10b      	bne.n	80045c0 <_printf_i+0x144>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	07df      	lsls	r7, r3, #31
 80045ac:	d508      	bpl.n	80045c0 <_printf_i+0x144>
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	6861      	ldr	r1, [r4, #4]
 80045b2:	4299      	cmp	r1, r3
 80045b4:	bfde      	ittt	le
 80045b6:	2330      	movle	r3, #48	@ 0x30
 80045b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045c0:	1b92      	subs	r2, r2, r6
 80045c2:	6122      	str	r2, [r4, #16]
 80045c4:	f8cd a000 	str.w	sl, [sp]
 80045c8:	464b      	mov	r3, r9
 80045ca:	aa03      	add	r2, sp, #12
 80045cc:	4621      	mov	r1, r4
 80045ce:	4640      	mov	r0, r8
 80045d0:	f7ff fee6 	bl	80043a0 <_printf_common>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d14a      	bne.n	800466e <_printf_i+0x1f2>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	b004      	add	sp, #16
 80045de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	f043 0320 	orr.w	r3, r3, #32
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	4833      	ldr	r0, [pc, #204]	@ (80046b8 <_printf_i+0x23c>)
 80045ec:	2778      	movs	r7, #120	@ 0x78
 80045ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	6831      	ldr	r1, [r6, #0]
 80045f6:	061f      	lsls	r7, r3, #24
 80045f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80045fc:	d402      	bmi.n	8004604 <_printf_i+0x188>
 80045fe:	065f      	lsls	r7, r3, #25
 8004600:	bf48      	it	mi
 8004602:	b2ad      	uxthmi	r5, r5
 8004604:	6031      	str	r1, [r6, #0]
 8004606:	07d9      	lsls	r1, r3, #31
 8004608:	bf44      	itt	mi
 800460a:	f043 0320 	orrmi.w	r3, r3, #32
 800460e:	6023      	strmi	r3, [r4, #0]
 8004610:	b11d      	cbz	r5, 800461a <_printf_i+0x19e>
 8004612:	2310      	movs	r3, #16
 8004614:	e7ac      	b.n	8004570 <_printf_i+0xf4>
 8004616:	4827      	ldr	r0, [pc, #156]	@ (80046b4 <_printf_i+0x238>)
 8004618:	e7e9      	b.n	80045ee <_printf_i+0x172>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	f023 0320 	bic.w	r3, r3, #32
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	e7f6      	b.n	8004612 <_printf_i+0x196>
 8004624:	4616      	mov	r6, r2
 8004626:	e7bd      	b.n	80045a4 <_printf_i+0x128>
 8004628:	6833      	ldr	r3, [r6, #0]
 800462a:	6825      	ldr	r5, [r4, #0]
 800462c:	6961      	ldr	r1, [r4, #20]
 800462e:	1d18      	adds	r0, r3, #4
 8004630:	6030      	str	r0, [r6, #0]
 8004632:	062e      	lsls	r6, r5, #24
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	d501      	bpl.n	800463c <_printf_i+0x1c0>
 8004638:	6019      	str	r1, [r3, #0]
 800463a:	e002      	b.n	8004642 <_printf_i+0x1c6>
 800463c:	0668      	lsls	r0, r5, #25
 800463e:	d5fb      	bpl.n	8004638 <_printf_i+0x1bc>
 8004640:	8019      	strh	r1, [r3, #0]
 8004642:	2300      	movs	r3, #0
 8004644:	6123      	str	r3, [r4, #16]
 8004646:	4616      	mov	r6, r2
 8004648:	e7bc      	b.n	80045c4 <_printf_i+0x148>
 800464a:	6833      	ldr	r3, [r6, #0]
 800464c:	1d1a      	adds	r2, r3, #4
 800464e:	6032      	str	r2, [r6, #0]
 8004650:	681e      	ldr	r6, [r3, #0]
 8004652:	6862      	ldr	r2, [r4, #4]
 8004654:	2100      	movs	r1, #0
 8004656:	4630      	mov	r0, r6
 8004658:	f7fb fdc2 	bl	80001e0 <memchr>
 800465c:	b108      	cbz	r0, 8004662 <_printf_i+0x1e6>
 800465e:	1b80      	subs	r0, r0, r6
 8004660:	6060      	str	r0, [r4, #4]
 8004662:	6863      	ldr	r3, [r4, #4]
 8004664:	6123      	str	r3, [r4, #16]
 8004666:	2300      	movs	r3, #0
 8004668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800466c:	e7aa      	b.n	80045c4 <_printf_i+0x148>
 800466e:	6923      	ldr	r3, [r4, #16]
 8004670:	4632      	mov	r2, r6
 8004672:	4649      	mov	r1, r9
 8004674:	4640      	mov	r0, r8
 8004676:	47d0      	blx	sl
 8004678:	3001      	adds	r0, #1
 800467a:	d0ad      	beq.n	80045d8 <_printf_i+0x15c>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	079b      	lsls	r3, r3, #30
 8004680:	d413      	bmi.n	80046aa <_printf_i+0x22e>
 8004682:	68e0      	ldr	r0, [r4, #12]
 8004684:	9b03      	ldr	r3, [sp, #12]
 8004686:	4298      	cmp	r0, r3
 8004688:	bfb8      	it	lt
 800468a:	4618      	movlt	r0, r3
 800468c:	e7a6      	b.n	80045dc <_printf_i+0x160>
 800468e:	2301      	movs	r3, #1
 8004690:	4632      	mov	r2, r6
 8004692:	4649      	mov	r1, r9
 8004694:	4640      	mov	r0, r8
 8004696:	47d0      	blx	sl
 8004698:	3001      	adds	r0, #1
 800469a:	d09d      	beq.n	80045d8 <_printf_i+0x15c>
 800469c:	3501      	adds	r5, #1
 800469e:	68e3      	ldr	r3, [r4, #12]
 80046a0:	9903      	ldr	r1, [sp, #12]
 80046a2:	1a5b      	subs	r3, r3, r1
 80046a4:	42ab      	cmp	r3, r5
 80046a6:	dcf2      	bgt.n	800468e <_printf_i+0x212>
 80046a8:	e7eb      	b.n	8004682 <_printf_i+0x206>
 80046aa:	2500      	movs	r5, #0
 80046ac:	f104 0619 	add.w	r6, r4, #25
 80046b0:	e7f5      	b.n	800469e <_printf_i+0x222>
 80046b2:	bf00      	nop
 80046b4:	08004a60 	.word	0x08004a60
 80046b8:	08004a71 	.word	0x08004a71

080046bc <__swbuf_r>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	460e      	mov	r6, r1
 80046c0:	4614      	mov	r4, r2
 80046c2:	4605      	mov	r5, r0
 80046c4:	b118      	cbz	r0, 80046ce <__swbuf_r+0x12>
 80046c6:	6a03      	ldr	r3, [r0, #32]
 80046c8:	b90b      	cbnz	r3, 80046ce <__swbuf_r+0x12>
 80046ca:	f7ff fa3f 	bl	8003b4c <__sinit>
 80046ce:	69a3      	ldr	r3, [r4, #24]
 80046d0:	60a3      	str	r3, [r4, #8]
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	071a      	lsls	r2, r3, #28
 80046d6:	d501      	bpl.n	80046dc <__swbuf_r+0x20>
 80046d8:	6923      	ldr	r3, [r4, #16]
 80046da:	b943      	cbnz	r3, 80046ee <__swbuf_r+0x32>
 80046dc:	4621      	mov	r1, r4
 80046de:	4628      	mov	r0, r5
 80046e0:	f000 f82a 	bl	8004738 <__swsetup_r>
 80046e4:	b118      	cbz	r0, 80046ee <__swbuf_r+0x32>
 80046e6:	f04f 37ff 	mov.w	r7, #4294967295
 80046ea:	4638      	mov	r0, r7
 80046ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	6922      	ldr	r2, [r4, #16]
 80046f2:	1a98      	subs	r0, r3, r2
 80046f4:	6963      	ldr	r3, [r4, #20]
 80046f6:	b2f6      	uxtb	r6, r6
 80046f8:	4283      	cmp	r3, r0
 80046fa:	4637      	mov	r7, r6
 80046fc:	dc05      	bgt.n	800470a <__swbuf_r+0x4e>
 80046fe:	4621      	mov	r1, r4
 8004700:	4628      	mov	r0, r5
 8004702:	f7ff fcbb 	bl	800407c <_fflush_r>
 8004706:	2800      	cmp	r0, #0
 8004708:	d1ed      	bne.n	80046e6 <__swbuf_r+0x2a>
 800470a:	68a3      	ldr	r3, [r4, #8]
 800470c:	3b01      	subs	r3, #1
 800470e:	60a3      	str	r3, [r4, #8]
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	6022      	str	r2, [r4, #0]
 8004716:	701e      	strb	r6, [r3, #0]
 8004718:	6962      	ldr	r2, [r4, #20]
 800471a:	1c43      	adds	r3, r0, #1
 800471c:	429a      	cmp	r2, r3
 800471e:	d004      	beq.n	800472a <__swbuf_r+0x6e>
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	07db      	lsls	r3, r3, #31
 8004724:	d5e1      	bpl.n	80046ea <__swbuf_r+0x2e>
 8004726:	2e0a      	cmp	r6, #10
 8004728:	d1df      	bne.n	80046ea <__swbuf_r+0x2e>
 800472a:	4621      	mov	r1, r4
 800472c:	4628      	mov	r0, r5
 800472e:	f7ff fca5 	bl	800407c <_fflush_r>
 8004732:	2800      	cmp	r0, #0
 8004734:	d0d9      	beq.n	80046ea <__swbuf_r+0x2e>
 8004736:	e7d6      	b.n	80046e6 <__swbuf_r+0x2a>

08004738 <__swsetup_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4b29      	ldr	r3, [pc, #164]	@ (80047e0 <__swsetup_r+0xa8>)
 800473c:	4605      	mov	r5, r0
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	460c      	mov	r4, r1
 8004742:	b118      	cbz	r0, 800474c <__swsetup_r+0x14>
 8004744:	6a03      	ldr	r3, [r0, #32]
 8004746:	b90b      	cbnz	r3, 800474c <__swsetup_r+0x14>
 8004748:	f7ff fa00 	bl	8003b4c <__sinit>
 800474c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004750:	0719      	lsls	r1, r3, #28
 8004752:	d422      	bmi.n	800479a <__swsetup_r+0x62>
 8004754:	06da      	lsls	r2, r3, #27
 8004756:	d407      	bmi.n	8004768 <__swsetup_r+0x30>
 8004758:	2209      	movs	r2, #9
 800475a:	602a      	str	r2, [r5, #0]
 800475c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004760:	81a3      	strh	r3, [r4, #12]
 8004762:	f04f 30ff 	mov.w	r0, #4294967295
 8004766:	e033      	b.n	80047d0 <__swsetup_r+0x98>
 8004768:	0758      	lsls	r0, r3, #29
 800476a:	d512      	bpl.n	8004792 <__swsetup_r+0x5a>
 800476c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800476e:	b141      	cbz	r1, 8004782 <__swsetup_r+0x4a>
 8004770:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004774:	4299      	cmp	r1, r3
 8004776:	d002      	beq.n	800477e <__swsetup_r+0x46>
 8004778:	4628      	mov	r0, r5
 800477a:	f7ff fafb 	bl	8003d74 <_free_r>
 800477e:	2300      	movs	r3, #0
 8004780:	6363      	str	r3, [r4, #52]	@ 0x34
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004788:	81a3      	strh	r3, [r4, #12]
 800478a:	2300      	movs	r3, #0
 800478c:	6063      	str	r3, [r4, #4]
 800478e:	6923      	ldr	r3, [r4, #16]
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	89a3      	ldrh	r3, [r4, #12]
 8004794:	f043 0308 	orr.w	r3, r3, #8
 8004798:	81a3      	strh	r3, [r4, #12]
 800479a:	6923      	ldr	r3, [r4, #16]
 800479c:	b94b      	cbnz	r3, 80047b2 <__swsetup_r+0x7a>
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a8:	d003      	beq.n	80047b2 <__swsetup_r+0x7a>
 80047aa:	4621      	mov	r1, r4
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 f883 	bl	80048b8 <__smakebuf_r>
 80047b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b6:	f013 0201 	ands.w	r2, r3, #1
 80047ba:	d00a      	beq.n	80047d2 <__swsetup_r+0x9a>
 80047bc:	2200      	movs	r2, #0
 80047be:	60a2      	str	r2, [r4, #8]
 80047c0:	6962      	ldr	r2, [r4, #20]
 80047c2:	4252      	negs	r2, r2
 80047c4:	61a2      	str	r2, [r4, #24]
 80047c6:	6922      	ldr	r2, [r4, #16]
 80047c8:	b942      	cbnz	r2, 80047dc <__swsetup_r+0xa4>
 80047ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80047ce:	d1c5      	bne.n	800475c <__swsetup_r+0x24>
 80047d0:	bd38      	pop	{r3, r4, r5, pc}
 80047d2:	0799      	lsls	r1, r3, #30
 80047d4:	bf58      	it	pl
 80047d6:	6962      	ldrpl	r2, [r4, #20]
 80047d8:	60a2      	str	r2, [r4, #8]
 80047da:	e7f4      	b.n	80047c6 <__swsetup_r+0x8e>
 80047dc:	2000      	movs	r0, #0
 80047de:	e7f7      	b.n	80047d0 <__swsetup_r+0x98>
 80047e0:	20000018 	.word	0x20000018

080047e4 <_raise_r>:
 80047e4:	291f      	cmp	r1, #31
 80047e6:	b538      	push	{r3, r4, r5, lr}
 80047e8:	4605      	mov	r5, r0
 80047ea:	460c      	mov	r4, r1
 80047ec:	d904      	bls.n	80047f8 <_raise_r+0x14>
 80047ee:	2316      	movs	r3, #22
 80047f0:	6003      	str	r3, [r0, #0]
 80047f2:	f04f 30ff 	mov.w	r0, #4294967295
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80047fa:	b112      	cbz	r2, 8004802 <_raise_r+0x1e>
 80047fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004800:	b94b      	cbnz	r3, 8004816 <_raise_r+0x32>
 8004802:	4628      	mov	r0, r5
 8004804:	f000 f830 	bl	8004868 <_getpid_r>
 8004808:	4622      	mov	r2, r4
 800480a:	4601      	mov	r1, r0
 800480c:	4628      	mov	r0, r5
 800480e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004812:	f000 b817 	b.w	8004844 <_kill_r>
 8004816:	2b01      	cmp	r3, #1
 8004818:	d00a      	beq.n	8004830 <_raise_r+0x4c>
 800481a:	1c59      	adds	r1, r3, #1
 800481c:	d103      	bne.n	8004826 <_raise_r+0x42>
 800481e:	2316      	movs	r3, #22
 8004820:	6003      	str	r3, [r0, #0]
 8004822:	2001      	movs	r0, #1
 8004824:	e7e7      	b.n	80047f6 <_raise_r+0x12>
 8004826:	2100      	movs	r1, #0
 8004828:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800482c:	4620      	mov	r0, r4
 800482e:	4798      	blx	r3
 8004830:	2000      	movs	r0, #0
 8004832:	e7e0      	b.n	80047f6 <_raise_r+0x12>

08004834 <raise>:
 8004834:	4b02      	ldr	r3, [pc, #8]	@ (8004840 <raise+0xc>)
 8004836:	4601      	mov	r1, r0
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	f7ff bfd3 	b.w	80047e4 <_raise_r>
 800483e:	bf00      	nop
 8004840:	20000018 	.word	0x20000018

08004844 <_kill_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	4d07      	ldr	r5, [pc, #28]	@ (8004864 <_kill_r+0x20>)
 8004848:	2300      	movs	r3, #0
 800484a:	4604      	mov	r4, r0
 800484c:	4608      	mov	r0, r1
 800484e:	4611      	mov	r1, r2
 8004850:	602b      	str	r3, [r5, #0]
 8004852:	f7fc fb36 	bl	8000ec2 <_kill>
 8004856:	1c43      	adds	r3, r0, #1
 8004858:	d102      	bne.n	8004860 <_kill_r+0x1c>
 800485a:	682b      	ldr	r3, [r5, #0]
 800485c:	b103      	cbz	r3, 8004860 <_kill_r+0x1c>
 800485e:	6023      	str	r3, [r4, #0]
 8004860:	bd38      	pop	{r3, r4, r5, pc}
 8004862:	bf00      	nop
 8004864:	200002a4 	.word	0x200002a4

08004868 <_getpid_r>:
 8004868:	f7fc bb23 	b.w	8000eb2 <_getpid>

0800486c <__swhatbuf_r>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	460c      	mov	r4, r1
 8004870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004874:	2900      	cmp	r1, #0
 8004876:	b096      	sub	sp, #88	@ 0x58
 8004878:	4615      	mov	r5, r2
 800487a:	461e      	mov	r6, r3
 800487c:	da0d      	bge.n	800489a <__swhatbuf_r+0x2e>
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004884:	f04f 0100 	mov.w	r1, #0
 8004888:	bf14      	ite	ne
 800488a:	2340      	movne	r3, #64	@ 0x40
 800488c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004890:	2000      	movs	r0, #0
 8004892:	6031      	str	r1, [r6, #0]
 8004894:	602b      	str	r3, [r5, #0]
 8004896:	b016      	add	sp, #88	@ 0x58
 8004898:	bd70      	pop	{r4, r5, r6, pc}
 800489a:	466a      	mov	r2, sp
 800489c:	f000 f848 	bl	8004930 <_fstat_r>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	dbec      	blt.n	800487e <__swhatbuf_r+0x12>
 80048a4:	9901      	ldr	r1, [sp, #4]
 80048a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80048aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80048ae:	4259      	negs	r1, r3
 80048b0:	4159      	adcs	r1, r3
 80048b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048b6:	e7eb      	b.n	8004890 <__swhatbuf_r+0x24>

080048b8 <__smakebuf_r>:
 80048b8:	898b      	ldrh	r3, [r1, #12]
 80048ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048bc:	079d      	lsls	r5, r3, #30
 80048be:	4606      	mov	r6, r0
 80048c0:	460c      	mov	r4, r1
 80048c2:	d507      	bpl.n	80048d4 <__smakebuf_r+0x1c>
 80048c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	6123      	str	r3, [r4, #16]
 80048cc:	2301      	movs	r3, #1
 80048ce:	6163      	str	r3, [r4, #20]
 80048d0:	b003      	add	sp, #12
 80048d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d4:	ab01      	add	r3, sp, #4
 80048d6:	466a      	mov	r2, sp
 80048d8:	f7ff ffc8 	bl	800486c <__swhatbuf_r>
 80048dc:	9f00      	ldr	r7, [sp, #0]
 80048de:	4605      	mov	r5, r0
 80048e0:	4639      	mov	r1, r7
 80048e2:	4630      	mov	r0, r6
 80048e4:	f7ff faba 	bl	8003e5c <_malloc_r>
 80048e8:	b948      	cbnz	r0, 80048fe <__smakebuf_r+0x46>
 80048ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ee:	059a      	lsls	r2, r3, #22
 80048f0:	d4ee      	bmi.n	80048d0 <__smakebuf_r+0x18>
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	f043 0302 	orr.w	r3, r3, #2
 80048fa:	81a3      	strh	r3, [r4, #12]
 80048fc:	e7e2      	b.n	80048c4 <__smakebuf_r+0xc>
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	6020      	str	r0, [r4, #0]
 8004902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004906:	81a3      	strh	r3, [r4, #12]
 8004908:	9b01      	ldr	r3, [sp, #4]
 800490a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800490e:	b15b      	cbz	r3, 8004928 <__smakebuf_r+0x70>
 8004910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004914:	4630      	mov	r0, r6
 8004916:	f000 f81d 	bl	8004954 <_isatty_r>
 800491a:	b128      	cbz	r0, 8004928 <__smakebuf_r+0x70>
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	81a3      	strh	r3, [r4, #12]
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	431d      	orrs	r5, r3
 800492c:	81a5      	strh	r5, [r4, #12]
 800492e:	e7cf      	b.n	80048d0 <__smakebuf_r+0x18>

08004930 <_fstat_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	4d07      	ldr	r5, [pc, #28]	@ (8004950 <_fstat_r+0x20>)
 8004934:	2300      	movs	r3, #0
 8004936:	4604      	mov	r4, r0
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	602b      	str	r3, [r5, #0]
 800493e:	f7fc fb20 	bl	8000f82 <_fstat>
 8004942:	1c43      	adds	r3, r0, #1
 8004944:	d102      	bne.n	800494c <_fstat_r+0x1c>
 8004946:	682b      	ldr	r3, [r5, #0]
 8004948:	b103      	cbz	r3, 800494c <_fstat_r+0x1c>
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	bd38      	pop	{r3, r4, r5, pc}
 800494e:	bf00      	nop
 8004950:	200002a4 	.word	0x200002a4

08004954 <_isatty_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4d06      	ldr	r5, [pc, #24]	@ (8004970 <_isatty_r+0x1c>)
 8004958:	2300      	movs	r3, #0
 800495a:	4604      	mov	r4, r0
 800495c:	4608      	mov	r0, r1
 800495e:	602b      	str	r3, [r5, #0]
 8004960:	f7fc fb1f 	bl	8000fa2 <_isatty>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_isatty_r+0x1a>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b103      	cbz	r3, 800496e <_isatty_r+0x1a>
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	200002a4 	.word	0x200002a4

08004974 <_init>:
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	bf00      	nop
 8004978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497a:	bc08      	pop	{r3}
 800497c:	469e      	mov	lr, r3
 800497e:	4770      	bx	lr

08004980 <_fini>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	bf00      	nop
 8004984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004986:	bc08      	pop	{r3}
 8004988:	469e      	mov	lr, r3
 800498a:	4770      	bx	lr
